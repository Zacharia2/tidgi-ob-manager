{"author":"whitefall","core-version":">=5.3.0","dependents":"$:/plugins/tiddlywiki/markdown","description":"Obsidian Vault发布工具 by NodeJS TiddlyWiki","list":"ui/Panel readme","name":"Obsidian Vault","plugin-type":"plugin","text":"{\"tiddlers\":{\"$:/plugins/whitefall/obsidian-vault/readme\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/readme\",\"type\":\"text/vnd.tiddlywiki\",\"text\":\"! tw5-obsidian-vault\\n\\nTidGi ≥ v0.8.0 需要在工作区设置 博客和服务器设置中 启用 HTTP API 并 关闭 凭证鉴权选项。\\n\\n# 在文本框中输入ob库文件夹路径，点击Add按钮。\\n# 你可以使用purge按钮清空添加的内容。\\n# 你可以在开发者模式-控制台中观看到正在进行的操作。\\n\\n!! ignore表达式\\n\\n默认表达式：留空即默认忽略 \\\".git\\\", \\\".obsidian\\\", \\\".stfolder\\\", \\\".stversions\\\" 四个文件夹。\\n\\n附加表达式：可以在ignore输入框输入`+文件夹名称, 文件夹名称, ...`，注意首字母必须为`+`，忽略更多文件夹。注意是英文逗号。\\n\\n自定义表达式：若首字母非`+`字符，则为自定义忽略文件夹。\\n\\n!! 过滤文件表达式\\n\\n使用正则表达式匹配文件中是否含有匹配内容，如“def:pub”，若文件夹中有此表达式则检出写入wiki中。\\n\\n\\n\\n项目介绍及仓库地址：https://github.com/tiddly-gittly/tidgi-obsidian-manager\"},\"$:/plugins/whitefall/obsidian-vault/router/get-obvault.js\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/router/get-obvault.js\",\"text\":\"!function(){\\\"use strict\\\";exports.method=\\\"GET\\\",exports.path=/^\\\\/obvault\\\\/(.+)$/,exports.handler=function(e,t,s){var i,a,r,n,p,o,d=require(\\\"path\\\"),l=require(\\\"fs\\\"),c=$tw.utils.decodeURIComponentSafe(s.params[0]),m=s.queryParameters,u=function(e,t){var t=t||[\\\".git\\\",\\\".obsidian\\\"],i=[];if(!l.lstatSync(e).isDirectory())return s.sendResponse(400,{\\\"Content-Type\\\":\\\"text/plain\\\"},\\\"Not folder: \\\"+e),!1;for(const r of l.readdirSync(e)){var a=d.join(e,r);l.statSync(a).isFile()?i.push(a):t.includes(r)||(a=u(a),i=i.concat(a))}return i},g=function(e,t){return e=e.replace(/\\\\\\\\/g,\\\"/\\\"),(t=t.replace(/\\\\\\\\/g,\\\"/\\\")).slice(e.length+1)},f=u(c,m.ignore);0!=f&&(i=f,a=m.regText,p={obVaultName:c.split(\\\"/\\\").pop()||\\\"-\\\",mdFiles:{},imgFiles:{},bp_peer:{}},o=a||\\\"\\\",i.forEach(e=>{var t;r=d.basename(e),n=d.extname(r),p.bp_peer[r]?p.bp_peer[r].push(g(c,e)):p.bp_peer[r]=[g(c,e)],-1!==[\\\".jpg\\\",\\\".jpeg\\\",\\\".png\\\"].indexOf(n)?p.imgFiles[r]?p.imgFiles[r].push({path:g(c,e),data:l.readFileSync(e).toString(\\\"base64\\\")}):p.imgFiles[r]=[{path:g(c,e),data:l.readFileSync(e).toString(\\\"base64\\\")}]:\\\".md\\\"===n&&(n=l.readFileSync(e,\\\"utf8\\\"),t=l.statSync(e),RegExp(o).test(n))&&(p.mdFiles[r]?p.mdFiles[r].push({path:g(c,e),data:n,created:$tw.utils.stringifyDate(t.birthtime),modified:$tw.utils.stringifyDate(t.mtime)}):p.mdFiles[r]=[{path:g(c,e),data:n,created:$tw.utils.stringifyDate(t.birthtime),modified:$tw.utils.stringifyDate(t.mtime)}])}),f=p,m=JSON.stringify(f),s.sendResponse(200,{\\\"Content-Type\\\":\\\"application/json\\\"},m))}}();\",\"type\":\"application/javascript\",\"module-type\":\"route\"},\"$:/plugins/whitefall/obsidian-vault/stylesheet/obsidian-main-style\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/stylesheet/obsidian-main-style\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/css\",\"text\":\"#ob-widget-path{width:100%;height:100%;line-height:100%;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}\"},\"$:/plugins/whitefall/obsidian-vault/ui/Panel\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/ui/Panel\",\"type\":\"text/vnd.tiddlywiki\",\"tags\":\"$:/tags/ControlPanel/SettingsTab\",\"caption\":\"OBM-Panel\",\"text\":\"<$obm/>\\n\"},\"$:/plugins/whitefall/obsidian-vault/ui/displayCaption\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/ui/displayCaption\",\"text\":\"\\\\whitespace trim\\n<h2 class=\\\"tc-title\\\">\\n{{!!caption}}\\n</h2>\"},\"$:/plugins/whitefall/obsidian-vault/ui/displayCaptionFilter\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/ui/displayCaptionFilter\",\"tags\":\"$:/tags/ViewTemplateTitleFilter\",\"list-before\":\"$:/config/ViewTemplateTitleFilters/default\",\"text\":\"[<currentTiddler>has[obvault]has[caption]then[$:/plugins/whitefall/obsidian-vault/ui/displayCaption]]\"},\"$:/plugins/whitefall/obsidian-vault/ui/vaulttrees\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/ui/vaulttrees\",\"tags\":\"$:/tags/SideBar\",\"caption\":\"VaultTrees\",\"text\":\"\\n\\n\\\\procedure leaf-node(prefix,chunk)\\n\\\\whitespace trim\\n<li>\\n<$list filter=\\\"[<chunk>is[shadow]] [<chunk>is[tiddler]]\\\" variable=\\\"full-title\\\">\\n<!-- $:/bb/概念网络、$:/概念网络 都会链接到概念网络，而不是：bb/概念网络、概念网络 -->\\n<span>{{$:/core/images/file}}</span>&#32;<$link to=<<full-title>>><$text text=<<chunk>>/></$link>\\n</$list>\\n</li>\\n\\\\end\\n\\n\\\\procedure branch-node(prefix,chunk,separator: \\\"/\\\",vaultname)\\n\\\\whitespace trim\\n<li>\\n<$set name=\\\"reveal-state\\\" value={{{ [[$:/state/tree/]addsuffix<prefix>addsuffix<chunk>] }}}>\\n<$reveal type=\\\"nomatch\\\" stateTitle=<<reveal-state>> text=\\\"show\\\">\\n<$button setTitle=<<reveal-state>> setTo=\\\"show\\\" class=\\\"tc-btn-invisible\\\">\\n{{$:/core/images/folder}}&#32;<$text text=<<chunk>>/>\\n</$button>\\n</$reveal>\\n<$reveal type=\\\"match\\\" stateTitle=<<reveal-state>> text=\\\"show\\\">\\n<$button setTitle=<<reveal-state>> setTo=\\\"hide\\\" class=\\\"tc-btn-invisible\\\">\\n{{$:/core/images/folder}}&#32;<$text text=<<chunk>>/>\\n</$button>\\n</$reveal>\\n&#32;\\n<span>(<$count filter=\\\"[field:obvault<vaultname>get[vaulttree]removeprefix<prefix>removeprefix<chunk>] -[<prefix>addsuffix<chunk>]\\\"/>)</span>\\n<$reveal type=\\\"match\\\" stateTitle=<<reveal-state>> text=\\\"show\\\">\\n<$macrocall $name=\\\"tree-node\\\" prefix={{{ [<prefix>addsuffix<chunk>] }}} separator=<<separator>> vaultname=<<vaultname>>/>\\n</$reveal>\\n</$set>\\n</li>\\n\\\\end\\n\\n\\\\procedure tree-node(prefix,separator: \\\"/\\\",vaultname)\\n\\\\whitespace trim\\n<ol>\\n<$list filter=\\\"[field:obvault<vaultname>get[vaulttree]removeprefix<prefix>splitbefore<separator>sort[]!suffix<separator>]\\\" variable=\\\"chunk\\\">\\n<$macrocall $name=\\\"leaf-node\\\" prefix=<<prefix>> chunk=<<chunk>> separator=<<separator>>/>\\n</$list>\\n<$list filter=\\\"[field:obvault<vaultname>get[vaulttree]removeprefix<prefix>splitbefore<separator>sort[]suffix<separator>]\\\" variable=\\\"chunk\\\">\\n<$macrocall $name=\\\"branch-node\\\" prefix=<<prefix>> chunk=<<chunk>> separator=<<separator>> vaultname=<<vaultname>>/>\\n</$list>\\n</ol>\\n\\\\end\\n\\n\\\\procedure tree(prefix: \\\"$:/\\\",separator: \\\"/\\\")\\n\\\\whitespace trim\\n<div class=\\\"tc-tree\\\">\\n<span><center><p>Obsidian Vault<sup><$link to=\\\"$:/plugins/whitefall/obsidian-vault/ui/Panel\\\">p</$link></sup>&nbsp;文件列表</p></center></span>\\n<$list filter=\\\"[get[obvault]unique[]]\\\">\\n<span><strong><$text text=<<currentTiddler>>/></strong></span>\\n<div>\\n<$macrocall $name=\\\"tree-node\\\" vaultname=<<currentTiddler>> prefix=<<prefix>> separator=<<separator>>/>\\n</div>\\n</$list>\\n</div>\\n\\\\end\\n\\n<<tree>>\\n\\n<!-- \\n[get[obvault]unique[]]\\n[field:obvault[Neural-Networks]get[vaulttree]]\\n条目名必须和字段路径中的名字一致。\\n-->\\n\"},\"$:/plugins/whitefall/obsidian-vault/obvault-main.js\":{\"title\":\"$:/plugins/whitefall/obsidian-vault/obvault-main.js\",\"type\":\"application/javascript\",\"module-type\":\"widget\",\"Modern.TiddlyDev#Origin\":\"obvault-main.ts\",\"text\":\"\\\"use strict\\\";var import_widget=require(\\\"$:/core/modules/widgets/widget.js\\\");async function obmd_to_wiki(t,e){var i=[{pattern:/\\\\!\\\\[\\\\[([^|]*?)\\\\]\\\\]/g,target:\\\"[img[$1]]\\\"},{pattern:/\\\\!\\\\[\\\\[(.*?)\\\\|(.*?)\\\\|*(\\\\d+)\\\\]\\\\]/g,target:\\\"[img width=$3 [$1]]\\\"},{pattern:/\\\\!\\\\[\\\\]\\\\((.*?)\\\\)/g,target:\\\"[img[$1]]\\\"},{pattern:/\\\\!\\\\[(.*?)\\\\]\\\\((.*?)\\\\)/g,target:\\\"[img[$1|$2]]\\\"}];for(const r in i)var a=i[r],t=t.replace(a.pattern,a.target);var o=[{pattern:/\\\\[\\\\[(?!.*!).*?\\\\|(.*?)\\\\]\\\\]/g,target:\\\"[[$2|$1]]\\\"},{pattern:/\\\\[\\\\[(?!.*!).*?\\\\]\\\\]/g,target:\\\"[[$1]]\\\"}];for(const l in o)var n=o[l],d=[...t.matchAll(n.pattern)],t=(console.log(d),t.replace(n.pattern,n.target));return t}function tm_notify(t,e){$tw.wiki.addTiddler({title:\\\"$:/state/notification/\\\"+t,text:t+\\\": \\\"+e}),$tw.notifier.display(\\\"$:/state/notification/\\\"+t)}async function addVault(t){console.log(\\\"vaultName: \\\"+t.obVaultName);var e=$tw.wiki.getTiddlerText(\\\"$:/status/UserName\\\");for(const w in t.mdFiles){var i=t.mdFiles[w];if(0!=i.length&&1==i.length){var a=await obmd_to_wiki(i[0].data,t.bp_peer),o=w.split(\\\".\\\")[0];$tw.wiki.addTiddler(new $tw.Tiddler({title:o,type:\\\"text/markdown\\\",created:i[0].created,modified:i[0].modified,modifier:e,text:a,obvault:t.obVaultName,vaulttree:\\\"$:/\\\"+i[0].path.split(\\\".\\\")[0]})),console.log(\\\"创建条目：\\\"+o)}else if(1<i.length)for(const m in i){var n=i[m],d=await obmd_to_wiki(n.data,t.bp_peer),r=n.path.split(\\\".\\\")[0];$tw.wiki.addTiddler(new $tw.Tiddler({title:r,type:\\\"text/markdown\\\",created:n.created,modified:n.modified,modifier:e,text:d,obvault:t.obVaultName,vaulttree:\\\"$:/\\\"+n.path.split(\\\".\\\")[0]})),console.log(\\\"创建同名异径条目：\\\"+r)}}for(const b in t.imgFiles){var l=t.imgFiles[b];if(0!=l.length&&1==l.length){var s=b,g=\\\"image/\\\"+s.substring(s.lastIndexOf(\\\".\\\")+1);$tw.wiki.addTiddler(new $tw.Tiddler({title:s,type:g,text:l[0].data,obvault:t.obVaultName})),console.log(\\\"创建图片条目：\\\"+s)}else if(1<l.length)for(const f in l){var u=l[f],c=u.path,p=\\\"image/\\\"+c.substring(c.lastIndexOf(\\\".\\\")+1);$tw.wiki.addTiddler(new $tw.Tiddler({title:c,type:p,text:u.data,obvault:t.obVaultName})),console.log(\\\"创建图片条目：\\\"+c)}}console.log(\\\"addVault: 所有添加工作已完成。\\\"),tm_notify(\\\"addVault\\\",\\\"所有添加工作已完成，请等待【文件系统同步服务】完成任务。\\\")}async function purgeVault(t){var e=$tw.wiki.filterTiddlers(\\\"[has:field[obvault]]\\\");0!==e.length?(e.forEach(t=>{console.log(\\\"删除条目：\\\"+t),$tw.wiki.deleteTiddler(t)}),tm_notify(\\\"purgeVault\\\",\\\"已经完全清空，请等待【文件系统同步服务】完成任务。\\\")):tm_notify(\\\"purgeVault\\\",\\\"未曾添加Obsidian仓库，写入记录为空。\\\")}async function fetchData(t,e,i){var a,o=[\\\".git\\\",\\\".obsidian\\\",\\\".stfolder\\\",\\\".stversions\\\"],o=(\\\"\\\"===i&&(a=JSON.stringify(o)),\\\"\\\"===i&&\\\"+\\\"!==i.at(0)||(n=i.substring(1).replace(/[ ]/g,\\\"\\\").split(\\\",\\\"),a=JSON.stringify(o.concat(n))),\\\"\\\"!==i&&\\\"+\\\"!==i.at(0)&&(n=i.replace(/[ ]/g,\\\"\\\").split(\\\",\\\"),a=JSON.stringify(n)),$tw.wiki.getTiddlerText(\\\"$:/info/url/full\\\")),n=o+\\\"obvault/\\\"+t+`?regText=${e}&ignore=`+a,o=(console.log(\\\"获取数据:\\\"+n),tm_notify(\\\"获取数据 (fetchData)  \\\",`\\\"${n}\\\"`),await fetch(n));return 400==o.status?(tm_notify(\\\"获取数据 (fetchData)  \\\",\\\"Not Folder\\\"),!1):(a=await o.json(),console.log(\\\"获取完成, 正在写入到wiki中。\\\"),tm_notify(\\\"获取数据 (fetchData)  \\\",\\\"获取完成, 正在写入到wiki中\\\"),a)}var ObvaultServer=class{constructor(){$tw.rootWidget.addEventListener(\\\"tw-obsidian-add\\\",async t=>{var e;\\\"tw-obsidian-add\\\"===t.type&&0!=(e=await fetchData(t.param[0],t.param[1],t.param[2]))&&addVault(e)}),$tw.rootWidget.addEventListener(\\\"tw-obsidian-purge\\\",async t=>{purgeVault()}),$tw.rootWidget.addEventListener(\\\"tw-obsidian-update\\\",async t=>{})}},ObVaultWidget=class extends import_widget.widget{refresh(t){return!1}async render(t,e){this.parentDomNode=t,this.execute();new ObvaultServer;var i=document.createElement(\\\"div\\\"),i=(i.innerHTML=`\\n    <div class=\\\"ob-main-widget-input\\\">\\n      <label for=\\\"path\\\">文件夹路径: </label>\\n      <input type=\\\"text\\\" id=\\\"ob-widget-path\\\" name=\\\"path\\\" placeholder=\\\"请输入路径。\\\">\\n      <label for=\\\"reg\\\">过滤文件: </label>\\n      <input type=\\\"text\\\" id=\\\"ob-widget-regText\\\" name=\\\"reg\\\" placeholder=\\\"请输入表达式\\\">\\n      <label for=\\\"ignore\\\">ignore: </label>\\n      <input type=\\\"text\\\" id=\\\"ob-widget-ignore\\\" name=\\\"ignore\\\" placeholder=\\\"请输入表达式\\\">\\n    </div>\\n    <button class=\\\"ob-main-widget-button\\\" id=\\\"ob-button-Add\\\" title=\\\"点击添加OB库\\\">Add</button>\\n    <button class=\\\"ob-main-widget-button\\\" id=\\\"ob-button-purge\\\" title=\\\"点击清空已添加的OB库\\\">purge</button>\\n    `,this.domNodes.push(t.appendChild(i)),document.getElementById(\\\"ob-button-Add\\\")),a=document.getElementById(\\\"ob-button-purge\\\");const o=document.getElementById(\\\"ob-widget-path\\\"),n=document.getElementById(\\\"ob-widget-regText\\\"),d=document.getElementById(\\\"ob-widget-ignore\\\");i.onclick=function(){0!==o.value.length?$tw.rootWidget.dispatchEvent({type:\\\"tw-obsidian-add\\\",param:[o.value,n.value,d.value]}):(console.log(\\\"输入为空！\\\"),tm_notify(\\\"addVault\\\",\\\"输入为空！\\\"))},a.onclick=function(){$tw.rootWidget.dispatchEvent({type:\\\"tw-obsidian-purge\\\"})}}};exports.obm=ObVaultWidget;\"}}}","title":"$:/plugins/whitefall/obsidian-vault","type":"application/json","version":"0.0.10","Modern.TiddlyDev#SHA256-Hashed":"e5ca10b815261ac2dbafb396aad97d409aa2502430f2bb9b9c131a2ede0597e5"}