{
    "fields": {
      "title": "$:/plugins/linonetwo/pinyin-fuzzy-search",
      "description": "提供模糊搜索和拼音搜索的能力",
      "author": "LinOnetwo",
      "core-version": ">=5.1.22",
      "plugin-type": "plugin",
      "version": "0.1.2",
      "list": [ "readme" ],
      "dependents": "",
      "type": "application/json",
      "text": {"tiddlers":{"$:/plugins/linonetwo/pinyin-fuzzy-search/pinyin-fuzzy-search.js":{"title":"$:/plugins/linonetwo/pinyin-fuzzy-search/pinyin-fuzzy-search.js","text":"\'use strict\';\\n\\nObject.defineProperty(exports, \'__esModule\', {\\n  value: true\\n});\\n/**\\n * Fuse.js v6.4.6 - Lightweight fuzzy-search (http://fusejs.io)\\n *\\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\\n * All Rights Reserved. Apache Software License 2.0\\n *\\n * http://www.apache.org/licenses/LICENSE-2.0\\n */\\n\\nfunction isArray(value) {\\n  return !Array.isArray ? getTag(value) === \'[object Array]\' : Array.isArray(value);\\n} // Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\\n\\n\\nconst INFINITY = 1 / 0;\\n\\nfunction baseToString(value) {\\n  // Exit early for strings to avoid a performance hit in some environments.\\n  if (typeof value == \'string\') {\\n    return value;\\n  }\\n\\n  let result = value + \'\';\\n  return result == \'0\' && 1 / value == -INFINITY ? \'-0\' : result;\\n}\\n\\nfunction toString(value) {\\n  return value == null ? \'\' : baseToString(value);\\n}\\n\\nfunction isString(value) {\\n  return typeof value === \'string\';\\n}\\n\\nfunction isNumber(value) {\\n  return typeof value === \'number\';\\n} // Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\\n\\n\\nfunction isBoolean(value) {\\n  return value === true || value === false || isObjectLike(value) && getTag(value) == \'[object Boolean]\';\\n}\\n\\nfunction isObject(value) {\\n  return typeof value === \'object\';\\n} // Checks if `value` is object-like.\\n\\n\\nfunction isObjectLike(value) {\\n  return isObject(value) && value !== null;\\n}\\n\\nfunction isDefined(value) {\\n  return value !== undefined && value !== null;\\n}\\n\\nfunction isBlank(value) {\\n  return !value.trim().length;\\n} // Gets the `toStringTag` of `value`.\\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\\n\\n\\nfunction getTag(value) {\\n  return value == null ? value === undefined ? \'[object Undefined]\' : \'[object Null]\' : Object.prototype.toString.call(value);\\n}\\n\\nconst EXTENDED_SEARCH_UNAVAILABLE = \'Extended search is not available\';\\nconst INCORRECT_INDEX_TYPE = \\"Incorrect \'index\' type\\";\\n\\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = key => `Invalid value for key ${key}`;\\n\\nconst PATTERN_LENGTH_TOO_LARGE = max => `Pattern length exceeds max of ${max}.`;\\n\\nconst MISSING_KEY_PROPERTY = name => `Missing ${name} property in key`;\\n\\nconst INVALID_KEY_WEIGHT_VALUE = key => `Property \'weight\' in key \'${key}\' must be a positive integer`;\\n\\nconst hasOwn = Object.prototype.hasOwnProperty;\\n\\nclass KeyStore {\\n  constructor(keys) {\\n    this._keys = [];\\n    this._keyMap = {};\\n    let totalWeight = 0;\\n    keys.forEach(key => {\\n      let obj = createKey(key);\\n      totalWeight += obj.weight;\\n\\n      this._keys.push(obj);\\n\\n      this._keyMap[obj.id] = obj;\\n      totalWeight += obj.weight;\\n    }); // Normalize weights so that their sum is equal to 1\\n\\n    this._keys.forEach(key => {\\n      key.weight /= totalWeight;\\n    });\\n  }\\n\\n  get(keyId) {\\n    return this._keyMap[keyId];\\n  }\\n\\n  keys() {\\n    return this._keys;\\n  }\\n\\n  toJSON() {\\n    return JSON.stringify(this._keys);\\n  }\\n\\n}\\n\\nfunction createKey(key) {\\n  let path = null;\\n  let id = null;\\n  let src = null;\\n  let weight = 1;\\n\\n  if (isString(key) || isArray(key)) {\\n    src = key;\\n    path = createKeyPath(key);\\n    id = createKeyId(key);\\n  } else {\\n    if (!hasOwn.call(key, \'name\')) {\\n      throw new Error(MISSING_KEY_PROPERTY(\'name\'));\\n    }\\n\\n    const name = key.name;\\n    src = name;\\n\\n    if (hasOwn.call(key, \'weight\')) {\\n      weight = key.weight;\\n\\n      if (weight <= 0) {\\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name));\\n      }\\n    }\\n\\n    path = createKeyPath(name);\\n    id = createKeyId(name);\\n  }\\n\\n  return {\\n    path,\\n    id,\\n    weight,\\n    src\\n  };\\n}\\n\\nfunction createKeyPath(key) {\\n  return isArray(key) ? key : key.split(\'.\');\\n}\\n\\nfunction createKeyId(key) {\\n  return isArray(key) ? key.join(\'.\') : key;\\n}\\n\\nfunction get(obj, path) {\\n  let list = [];\\n  let arr = false;\\n\\n  const deepGet = (obj, path, index) => {\\n    if (!isDefined(obj)) {\\n      return;\\n    }\\n\\n    if (!path[index]) {\\n      // If there\'s no path left, we\'ve arrived at the object we care about.\\n      list.push(obj);\\n    } else {\\n      let key = path[index];\\n      const value = obj[key];\\n\\n      if (!isDefined(value)) {\\n        return;\\n      } // If we\'re at the last value in the path, and if it\'s a string/number/bool,\\n      // add it to the list\\n\\n\\n      if (index === path.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {\\n        list.push(toString(value));\\n      } else if (isArray(value)) {\\n        arr = true; // Search each item in the array.\\n\\n        for (let i = 0, len = value.length; i < len; i += 1) {\\n          deepGet(value[i], path, index + 1);\\n        }\\n      } else if (path.length) {\\n        // An object. Recurse further.\\n        deepGet(value, path, index + 1);\\n      }\\n    }\\n  }; // Backwards compatibility (since path used to be a string)\\n\\n\\n  deepGet(obj, isString(path) ? path.split(\'.\') : path, 0);\\n  return arr ? list : list[0];\\n}\\n\\nconst MatchOptions = {\\n  // Whether the matches should be included in the result set. When `true`, each record in the result\\n  // set will include the indices of the matched characters.\\n  // These can consequently be used for highlighting purposes.\\n  includeMatches: false,\\n  // When `true`, the matching function will continue to the end of a search pattern even if\\n  // a perfect match has already been located in the string.\\n  findAllMatches: false,\\n  // Minimum number of characters that must be matched before a result is considered a match\\n  minMatchCharLength: 1\\n};\\nconst BasicOptions = {\\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\\n  // match is found before the end of the same input.\\n  isCaseSensitive: false,\\n  // When true, the matching function will continue to the end of a search pattern even if\\n  includeScore: false,\\n  // List of properties that will be searched. This also supports nested properties.\\n  keys: [],\\n  // Whether to sort the result list, by score\\n  shouldSort: true,\\n  // Default sort function: sort by ascending score, ascending index\\n  sortFn: (a, b) => a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1\\n};\\nconst FuzzyOptions = {\\n  // Approximately where in the text is the pattern expected to be found?\\n  location: 0,\\n  // At what point does the match algorithm give up. A threshold of \'0.0\' requires a perfect match\\n  // (of both letters and location), a threshold of \'1.0\' would match anything.\\n  threshold: 0.6,\\n  // Determines how close the match must be to the fuzzy location (specified above).\\n  // An exact letter match which is \'distance\' characters away from the fuzzy location\\n  // would score as a complete mismatch. A distance of \'0\' requires the match be at\\n  // the exact location specified, a threshold of \'1000\' would require a perfect match\\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\\n  distance: 100\\n};\\nconst AdvancedOptions = {\\n  // When `true`, it enables the use of unix-like search commands\\n  useExtendedSearch: false,\\n  // The get function to use when fetching an object\'s properties.\\n  // The default will search nested paths *ie foo.bar.baz*\\n  getFn: get,\\n  // When `true`, search will ignore `location` and `distance`, so it won\'t matter\\n  // where in the string the pattern appears.\\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\\n  ignoreLocation: false,\\n  // When `true`, the calculation for the relevance score (used for sorting) will\\n  // ignore the field-length norm.\\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\\n  ignoreFieldNorm: false\\n};\\nvar Config = { ...BasicOptions,\\n  ...MatchOptions,\\n  ...FuzzyOptions,\\n  ...AdvancedOptions\\n};\\nconst SPACE = /[^ ]+/g; // Field-length norm: the shorter the field, the higher the weight.\\n// Set to 3 decimals to reduce index size.\\n\\nfunction norm(mantissa = 3) {\\n  const cache = new Map();\\n  const m = Math.pow(10, mantissa);\\n  return {\\n    get(value) {\\n      const numTokens = value.match(SPACE).length;\\n\\n      if (cache.has(numTokens)) {\\n        return cache.get(numTokens);\\n      }\\n\\n      const norm = 1 / Math.sqrt(numTokens); // In place of `toFixed(mantissa)`, for faster computation\\n\\n      const n = parseFloat(Math.round(norm * m) / m);\\n      cache.set(numTokens, n);\\n      return n;\\n    },\\n\\n    clear() {\\n      cache.clear();\\n    }\\n\\n  };\\n}\\n\\nclass FuseIndex {\\n  constructor({\\n    getFn = Config.getFn\\n  } = {}) {\\n    this.norm = norm(3);\\n    this.getFn = getFn;\\n    this.isCreated = false;\\n    this.setIndexRecords();\\n  }\\n\\n  setSources(docs = []) {\\n    this.docs = docs;\\n  }\\n\\n  setIndexRecords(records = []) {\\n    this.records = records;\\n  }\\n\\n  setKeys(keys = []) {\\n    this.keys = keys;\\n    this._keysMap = {};\\n    keys.forEach((key, idx) => {\\n      this._keysMap[key.id] = idx;\\n    });\\n  }\\n\\n  create() {\\n    if (this.isCreated || !this.docs.length) {\\n      return;\\n    }\\n\\n    this.isCreated = true; // List is Array<String>\\n\\n    if (isString(this.docs[0])) {\\n      this.docs.forEach((doc, docIndex) => {\\n        this._addString(doc, docIndex);\\n      });\\n    } else {\\n      // List is Array<Object>\\n      this.docs.forEach((doc, docIndex) => {\\n        this._addObject(doc, docIndex);\\n      });\\n    }\\n\\n    this.norm.clear();\\n  } // Adds a doc to the end of the index\\n\\n\\n  add(doc) {\\n    const idx = this.size();\\n\\n    if (isString(doc)) {\\n      this._addString(doc, idx);\\n    } else {\\n      this._addObject(doc, idx);\\n    }\\n  } // Removes the doc at the specified index of the index\\n\\n\\n  removeAt(idx) {\\n    this.reco'... 122128 more characters"
      name: 'pinyin-fuzzy-search'
    },
    cache: [Object: null prototype] {}
  }
  {
    fields: [Object: null prototype] {
      text: '{"tiddlers":{"$:/plugins/linonetwo/prevent-edit/preventPopUp.js":{"title":"$:/plugins/linonetwo/prevent-edit/preventPopUp.js","created":"20200414150455988","creator":"LinOnetwo","module-type":"startup","type":"application/javascript","text":"exports.startup = function() {\\n  $tw.unloadTasks = $tw.unloadTasks.filter(task => !task.toString().includes(\'confirmationMessage\'));\\n}\\n"},"$:/plugins/linonetwo/prevent-edit/readme":{"title":"$:/plugins/linonetwo/prevent-edit/readme","created":"20200414135748497","modified":"20200602062349232","type":"text/vnd.tiddlywiki","text":"!! 功能\\n\\n这个插件主要是让在线部署后的 Wiki 不会弹出「有变动关闭网页前请保存」这样的对话框。\\n\\n!! 动机\\n\\n来自 TiddlyMap 的 [[$:/plugins/felixhayashi/tiddlymap/misc/defaultViewHolder]] 和来自系统的 [[$:/StoryList]] 老是自动变：\\n\\n```diff\\ncreated: 20200409022623558\\ncreator: Lin Onetwo - 林一二\\n-modified: 20200414104033109\\n+modified: 20200414135126182\\nmodifier: Lin Onetwo - 林一二\\ntitle: $:/plugins/felixhayashi/tiddlymap/misc/defaultViewHolder\\ntype: text/vnd.tiddlywiki\\n```\\n\\n没有实质性的变化，而且又经常发生在 wiki 部署后，这样在线版 wiki 就会弹出「This page is asking you to confirm that you want to leave - data you have entered may not be saved」。\\n\\n但我只是想做浏览不想做编辑啊，这让我觉得很烦。\\n\\n后来发现原来是 onbeforeunload 导致的，[[我去仓库里搜到了|https://github.com/Jermolene/TiddlyWiki5/search?q=beforeunload&unscoped_q=beforeunload]]是 `$tw.utils.each($tw.unloadTasks` 在用它，所以我就过滤了一下 `$tw.unloadTasks`。而且还不能立即做这个过滤，因为 `$:/tags/RawMarkup` 是在沙盒里执行的，不能修改 `$tw` 。\\n\\n所以最终我跟着 [[Adding Babel Polyfill to TiddlyWiki|https://tiddlywiki.com/dev/#Adding%20Babel%20Polyfill%20to%20TiddlyWiki]] 这篇教程，加了一个 startup script，在启动时、上述代码之后，就清理掉那个导致弹窗的 unloadTask，世界终于清静了。\\n\\n最终，我把它包装成了这个 [[prevent-edit|$:/plugins/linonetwo/prevent-edit]] 插件。\\n"}}}',
      type: 'application/json',
      author: 'LinOnetwo',
      'core-version': '>=5.1.22',
      created: 2021-10-17T09:29:18.218Z,
      dependents: '',
      description: 'Prevent "This page is asking you to confirm that you want to leave" in a read-only site',
      list: [ 'readme' ],
      modified: 2021-10-17T09:29:18.218Z,
      'plugin-type': 'plugin',
      title: '$:/plugins/linonetwo/prevent-edit',
      version: '0.0.1',
      revision: '0',
      bag: 'default'
    },
    cache: [Object: null prototype] {}
  }
  {
    fields: [Object: null prototype] {
      text: `{"tiddlers":{"$:/plugins/linonetwo/preview-glass/config":{"title":"$:/plugins/linonetwo/preview-glass/config","text":"\\\\define default()\\n<dt>$(defaults)$$(option)$</dt>\\n<dd>\\n//{{$:/plugins/linonetwo/preview-glass/lingo/$(option)$}}<$list\\nfilter=\\"[[$(option)$]prefix[template]]\\">\\n{{$(defaults)$$(option)$}}</$list>://<br>\\n<$edit-text tag=input tiddler=\\"$(defaults)$$(option)$\\"/>\\n</dd>\\n\\\\end\\n\\n<dl class=\\"preview-defaults\\">\\n<$vars defaults=\\"$:/plugins/linonetwo/preview-glass/defaults/\\">\\n<$list filter=\\"[all[tiddlers+shadows]removeprefix<defaults>sort[title]]\\" variable=\\"option\\">\\n<<default>>\\n</$list>\\n</$vars>\\n</dl>\\n<style>.preview-defaults input {width:90%;}</style>\\n"},"$:/plugins/linonetwo/preview-glass/lingo/keys":{"title":"$:/plugins/linonetwo/preview-glass/lingo/keys","text":"modifier keys to trigger popup directly on-hover (ctrl, alt+shift, meta, etc...)"},"$:/plugins/linonetwo/preview-glass/defaults/keys":{"title":"$:/plugins/linonetwo/preview-glass/defaults/keys","text":"CTRL"},"$:/plugins/linonetwo/preview-glass/lingo/delay":{"title":"$:/plugins/linonetwo/preview-glass/lingo/delay","text":"delay popup for this many milliseconds"},"$:/plugins/linonetwo/preview-glass/defaults/delay":{"title":"$:/plugins/linonetwo/preview-glass/defaults/delay","text":"150"},"$:/plugins/linonetwo/preview-glass/lingo/class":{"title":"$:/plugins/linonetwo/preview-glass/lingo/class","text":"css classes applied to the popup"},"$:/plugins/linonetwo/preview-glass/defaults/class":{"title":"$:/plugins/linonetwo/preview-glass/defaults/class","text":"hover-popup-preview-container"},"$:/plugins/linonetwo/preview-glass/lingo/not":{"title":"$:/plugins/linonetwo/preview-glass/lingo/not","text":"no preview for links inside elements with these classes"},"$:/plugins/linonetwo/preview-glass/defaults/not":{"title":"$:/plugins/linonetwo/preview-glass/defaults/not","text":"tc-drop-down tc-search-drop-down tc-sidebar-scrollable tc-topbar tc-tiddler-title"},"$:/plugins/linonetwo/preview-glass/lingo/exclude":{"title":"$:/plugins/linonetwo/preview-glass/lingo/exclude","text":"no preview for links to tiddlers matching this filter"},"$:/plugins/linonetwo/preview-glass/defaults/exclude":{"title":"$:/plugins/linonetwo/preview-glass/defaults/exclude","text":"[is[system]] [all[shadows]] [!has[text]]"},"$:/plugins/linonetwo/preview-glass/lingo/template":{"title":"$:/plugins/linonetwo/preview-glass/lingo/template","text":"the preview template"},"$:/plugins/linonetwo/preview-glass/defaults/template":{"title":"$:/plugins/linonetwo/preview-glass/defaults/template","text":"$:/plugins/linonetwo/preview-glass/template"},"$:/plugins/linonetwo/preview-glass/lingo/open":{"title":"$:/plugins/linonetwo/preview-glass/lingo/open","text":"view at ''<<WIKI>>''"},"$:/plugins/linonetwo/preview-glass/keyboard.js":{"title":"$:/plugins/linonetwo/preview-glass/keyboard.js","text":"/*\\\\\\ntitle: $:/plugins/tobibeer/preview/keyboard.js\\ntype: application/javascript\\nmodule-type: utils\\nFixes $:/core/modules/utils/dom/keyboard.js by providing an alternative.\\nDo not use as an API, let's fix the core.\\n@preserve\\n\\\\*/\\n(function(){\\n\\n  /*jslint node: true, browser: true */\\n  /*global $tw: false */\\n  \\"use strict\\";\\n  \\n  var namedKeys = {\\n    \\"BACKSPACE\\": 8,\\n    \\"TAB\\": 9,\\n    \\"ENTER\\": 13,\\n    \\"ESCAPE\\": 27,\\n    \\"PAGEUP\\": 33,\\n    \\"PAGEDOWN\\": 34,\\n    \\"END\\": 35,\\n    \\"HOME\\": 36,\\n    \\"LEFT\\":\\t37,\\n    \\"UP\\": 38,\\n    \\"RIGHT\\": 39,\\n    \\"DOWN\\": 40,\\n    \\"INSERT\\": 45,\\n    \\"DELETE\\": 46\\n  };\\n  \\n  /*\\n  Parses a key descriptor into the structure:\\n  {\\n    keyCode: numeric keycode\\n    shiftKey: boolean\\n    altKey: boolean\\n    ctrlKey: boolean\\n  }\\n  Key descriptors have the following format:\\n    ctrl+enter\\n    ctrl+shift+alt+A\\n  */\\n  exports.parseKeyDescriptorTB = function(keyDescriptor) {\\n    var neg,s,t,\\n      components = keyDescriptor.toUpperCase().split(\\"+\\"),\\n      info = {\\n        keyCode: null,\\n        shiftKey: false,\\n        altKey: false,\\n        ctrlKey: false\\n      };\\n    for(t=0; t<components.length; t++) {\\n      neg = false;\\n      s = components[t];\\n      // Look for negation\\n      if(s.substr(0,1) === \\"!\\") {\\n        neg = true;\\n        s = s.substr(1);\\n      }\\n      // Look for modifier keys\\n      if(s === \\"CTRL\\") {\\n        info.ctrlKey = neg ? null : true;\\n      } else if(s === \\"SHIFT\\") {\\n        info.shiftKey =  neg ? null : true;\\n      } else if(s === \\"ALT\\") {\\n        info.altKey =  neg ? null : true;\\n      } else if(s === \\"META\\") {\\n        info.metaKey =  neg ? null : true;\\n      // Replace named keys with their code\\n      } else if(namedKeys[s]) {\\n        info.keyCode = namedKeys[s];\\n      // Normal letter\\n      } else {\\n        info.keyCode = s.charCodeAt(0);\\n      }\\n    }\\n    return info;\\n  };\\n  \\n  exports.checkKeyDescriptorTB = function(event,keyInfo) {\\n    var metaKeyStatus = !!keyInfo.metaKey; // Using a temporary variable to keep JSHint happy\\n    return (keyInfo.keyCode === null || event.keyCode === keyInfo.keyCode) &&\\n      (keyInfo.shiftKey === null ? !event.shiftKey : event.shiftKey === keyInfo.shiftKey) &&\\n      (keyInfo.altKey === null ? !event.altKey : event.altKey === keyInfo.altKey) &&\\n      (keyInfo.ctrlKey === null ? !event.ctrlKey : event.ctrlKey === keyInfo.ctrlKey) &&\\n      (keyInfo.metaKey === null ? !event.metaKey : event.metaKey === metaKeyStatus);\\n  };\\n  \\n  })();","type":"application/javascript","module-type":"utils","Fixes $":"/core/modules/utils/dom/keyboard.js by providing an alternative."},"$:/plugins/linonetwo/preview-glass/link.js":{"title":"$:/plugins/linonetwo/preview-glass/link.js","text":"/*\\\\\\ntitle: $:/plugins/linonetwo/preview-glass/link.js\\ntype: application/javascript\\nmodule-type: startup\\nEnhances the link widget for on-hover previews\\n\\nModified by LinOnetwo\\n\\n@preserve\\n\\\\*/\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\n(function () {\\n  var // Global flag to stop mouseover madness\\n    block,\\n    // Get core link widget\\n    CoreLink = require('$:/core/modules/widgets/link.js').link,\\n    // Store ref to render() and handleClickEvent()\\n    renderCore = CoreLink.prototype.render,\\n    clickCore = CoreLink.prototype.handleClickEvent;\\n\\n  // Hijack core link widget render()\\n  CoreLink.prototype.render = function () {\\n    // Run core handler\\n    renderCore.apply(this, arguments);\\n    var self = this,\\n      wiki = this.wiki,\\n      // The link node\\n      el = this.domNodes[0],\\n      // Target tiddler\\n      to = wiki.getTiddler(self.to),\\n      // Shortcut to defaults namespace\\n      defaults = '$:/plugins/linonetwo/preview-glass/defaults/',\\n      // Shortcut to preview namespace\\n      preview = '$:/temp/tobibeer/preview-',\\n      // Modifier keys to quick-show the popup w/o delay\\n      keys = $tw.utils.parseKeyDescriptorTB(wiki.getTextReference(defaults + 'keys', '').toUpperCase()),\\n      // Delay for popup rendering\\n      delay = wiki.getTextReference(defaults + 'delay').toUpperCase(),\\n      //Check if popup already open\\n      getInfo = function (el) {\\n        // Get current popup level\\n        var info = $tw.popup.popupInfo(el),\\n          // Get current popup level\\n          level = info.popupLevel;\\n        return wiki.getTextReference(preview + level) && wiki.getTextReference(preview + level + '-tiddler') === self.to\\n          ? null\\n          : info;\\n      },\\n      // Displays the preview popup\\n      showPopup = function () {\\n        var level,\\n          // Get info (only if not open yet)\\n          info = getInfo(el);\\n        // Not open yet and not yet blocking mouseover madness?\\n        if (info) {\\n          // Get current popup level\\n          level = info.popupLevel;\\n          // Stop waiting for other popups to pop up\\n          clearTimeout(self.previewTimeout);\\n          // Quite all of outer level\\n          $tw.popup.cancel(level);\\n          // Level up\\n          level++;\\n          // Store reference to tiddler to be previewed for level\\n          wiki.setText(preview + level + '-tiddler', 'text', null, self.to);\\n          // Store the popup details if not already there\\n          if ($tw.popup.findPopup(preview + level) === -1) {\\n            // Show popup with timeout, to get past nextTick\\n            setTimeout(function () {\\n              // Core popup triggering\\n              $tw.popup.triggerPopup({\\n                // For this tiddler\\n                domNode: el,\\n                // The state for this level\\n                title: preview + level,\\n                wiki: wiki,\\n              });\\n              block = 0;\\n            }, 50);\\n          }\\n        }\\n      },\\n      // A helper to determine whether or not to actually show the popup\\n      show = function () {\\n        var ex,\\n          exclude,\\n          // By default, show\\n          doShow = 1,\\n          // The css classes in which not to display previews for links\\n          not = wiki.getTextReference(defaults + 'not', '');\\n        // Got any?\\n        if (not) {\\n          // Split classes and loop\\n          $tw.utils.each(not.split(' '), function (n) {\\n            // This node\\n            var node = el;\\n            // Loop so long as parent-nodes and still displaying\\n            while (node && doShow) {\\n              // Node has exclude-class?\\n              if ($tw.utils.hasClass(node, n)) {\\n                // Ok, so we're not showing\\n                doShow = 0;\\n                // Stop iterating\\n                return false;\\n              }\\n              // Next partent\\n              node = node.parentNode;\\n            }\\n          });\\n        }\\n        // Not aborted yet?\\n        if (doShow) {\\n          // get exclude filter\\n          exclude = wiki.getTextReference(defaults + 'exclude', '');\\n          // Fetch excluded titles\\n          ex = exclude ? wiki.filterTiddlers(exclude) : [];\\n          // Title in excludes?\\n      `... 7605 more characters,
      type: 'application/json',
      author: 'LinOnetwo',
      'core-version': '>=5.1.22',
      created: 2021-10-17T09:29:20.431Z,
      dependents: '$:/plugins/tobibeer/appear $:/plugins/ooktech/dynamic-tables $:/plugins/linonetwo/inverse-link-and-folder',
      description: 'Glassify Modification to the tobibeer/preview plugin, add inverse links, and make it auto-close',
      documentation: 'https://tobibeer.github.io/tw5-preview',
      list: [ 'readme', 'config', 'motivation' ],
      modified: 2021-10-17T09:29:20.431Z,
      'plugin-priority': '1',
      'plugin-type': 'plugin',
      source: 'https://github.com/tobibeer/tw5-preview',
      title: '$:/plugins/linonetwo/preview-glass',
      version: '0.5.7',
      revision: '0',
      bag: 'default'
    },
    cache: [Object: null prototype] {}
  }
  {
    fields: [Object: null prototype] {
      title: '$:/plugins/linonetwo/tw-react',
      description: 'Allow using ReactJS Components in TW widget.',
      author: 'LinOnetwo',
      'core-version': '>=5.1.22',
      'plugin-type': 'plugin',
      version: '0.4.6',
      list: [ 'readme' ],
      dependents: '',
      type: 'application/json',
      text: '{"tiddlers":{"$:/plugins/linonetwo/tw-react/example.js":{"title":"$:/plugins/linonetwo/tw-react/example.js","text":"\\"use strict\\";\\n\\n// src/exampleFunction.tsx\\nvar import_react = require(\\"react\\");\\nvar import_jsx_runtime = require(\\"react/jsx-runtime\\");\\nfunction ExampleFunction() {\\n  const [counter, counterSetter] = (0, import_react.useState)(0);\\n  (0, import_react.useEffect)(() => {\\n    let localCounter = 0;\\n    const handle = setInterval(() => {\\n      counterSetter(++localCounter);\\n    }, 1e3);\\n    return () => {\\n      clearInterval(handle);\\n    };\\n  }, []);\\n  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\\"span\\", { children: counter });\\n}\\n\\n// src/example.tsx\\nvar import_jsx_runtime2 = require(\\"react/jsx-runtime\\");\\nvar Widget = require(\\"$:/plugins/linonetwo/tw-react/widget.js\\").widget;\\nvar ReactDom = require(\\"react-dom\\");\\nvar React = require(\\"react\\");\\nvar e = React.createElement;\\nvar LikeButton = class extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    const defaultState = { liked: false };\\n    try {\\n      this.state = JSON.parse($tw.wiki.getTiddlerText(this.props.stateTiddler, \\"{}\\")) ?? defaultState;\\n    } catch {\\n      this.state = defaultState;\\n    }\\n  }\\n  setState(nextState) {\\n    super.setState(nextState);\\n    $tw.wiki.setText(this.props.stateTiddler, \\"text\\", void 0, JSON.stringify(nextState));\\n  }\\n  render() {\\n    if (this.state.liked) {\\n      return \\"You liked this.\\";\\n    }\\n    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(\\"button\\", { onClick: () => this.setState({ liked: true }), children: [\\n      \\"Like \\",\\n      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(ExampleFunction, {})\\n    ] });\\n  }\\n};\\nvar LikeButtonWidget = class extends Widget {\\n  constructor() {\\n    super(...arguments);\\n    this.reactComponent = LikeButton;\\n    this.getProps = () => ({ stateTiddler: this.getAttribute(\\"stateTiddler\\") });\\n  }\\n};\\nexports.likeButtonExampleWidget = LikeButtonWidget;\\n","creator":"LinOnetwo","type":"application/javascript","module-type":"widget"},"dist/plugins/linonetwo/tw-react/index.js":{"title":"dist/plugins/linonetwo/tw-react/index.js","text":"\\"use strict\\";\\nvar __defProp = Object.defineProperty;\\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\\nvar __getOwnPropNames = Object.getOwnPropertyNames;\\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\\nvar __export = (target, all) => {\\n  for (var name in all)\\n    __defProp(target, name, { get: all[name], enumerable: true });\\n};\\nvar __copyProps = (to, from, except, desc) => {\\n  if (from && typeof from === \\"object\\" || typeof from === \\"function\\") {\\n    for (let key of __getOwnPropNames(from))\\n      if (!__hasOwnProp.call(to, key) && key !== except)\\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\\n  }\\n  return to;\\n};\\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \\"__esModule\\", { value: true }), mod);\\n\\n// src/index.ts\\nvar src_exports = {};\\n__export(src_exports, {\\n  ParentWidgetContext: () => ParentWidgetContext,\\n  useFilter: () => useFilter,\\n  useRenderTiddler: () => useRenderTiddler,\\n  useWidget: () => useWidget\\n});\\nmodule.exports = __toCommonJS(src_exports);\\n\\n// src/hooks/useFilter.ts\\nvar import_react = require(\\"react\\");\\nfunction useFilter(twFilter, widget = $tw.rootWidget, dependencies = []) {\\n  const [filterResult, setFilterResult] = (0, import_react.useState)([]);\\n  const compiledFilter = (0, import_react.useMemo)(() => $tw.wiki.compileFilter(twFilter), [twFilter]);\\n  (0, import_react.useEffect)(() => {\\n    setFilterResult(compiledFilter(void 0, widget));\\n  }, [compiledFilter, widget, ...dependencies]);\\n  return filterResult;\\n}\\n\\n// src/hooks/useRenderTiddler.ts\\nvar import_react3 = require(\\"react\\");\\n\\n// src/hooks/context.ts\\nvar import_react2 = require(\\"react\\");\\nvar ParentWidgetContext = (0, import_react2.createContext)(void 0);\\n\\n// src/hooks/useRenderTiddler.ts\\nfunction useRenderTiddler(tiddlerTitle, containerReference, options) {\\n  const parentWidget = (0, import_react3.useContext)(ParentWidgetContext);\\n  (0, import_react3.useEffect)(() => {\\n    const domNode = containerReference.current;\\n    if (domNode === null) {\\n      return;\\n    }\\n    if (parentWidget === void 0) {\\n      throw new Error(\\n        \\"Your plugin have a bug: `parentWidget` is undefined, you should use `<ParentWidgetContext.Provider value={props.parentWidget}>`, see tw-react for document.\\"\\n      );\\n    }\\n    if (options?.skip === true) {\\n      return;\\n    }\\n    const id = String(Math.random());\\n    const transcludeWidgetNode = $tw.wiki.makeTranscludeWidget(tiddlerTitle, {\\n      document,\\n      parentWidget,\\n      recursionMarker: \\"yes\\",\\n      mode: \\"block\\",\\n      importPageMacros: true,\\n      variables: { \\"use-widget-id\\": id }\\n    });\\n    const tiddlerContainer = document.createElement(\\"div\\");\\n    domNode.append(tiddlerContainer);\\n    transcludeWidgetNode.render(tiddlerContainer, null);\\n    parentWidget.children.push(transcludeWidgetNode);\\n    return () => {\\n      parentWidget.children = parentWidget.children.filter((child) => child.getVariable(\\"use-widget-id\\") !== id);\\n      if (domNode === null) {\\n        return;\\n      }\\n      domNode.textContent = \\"\\";\\n    };\\n  }, [tiddlerTitle, containerReference]);\\n}\\n\\n// src/hooks/useWidget.ts\\nvar import_react4 = require(\\"react\\");\\nfunction useWidget(parseTreeNode, containerReference, options) {\\n  const parentWidget = (0, import_react4.useContext)(ParentWidgetContext);\\n  (0, import_react4.useEffect)(() => {\\n    const domNode = containerReference.current;\\n    if (domNode === null) {\\n      return;\\n    }\\n    if (parentWidget === void 0) {\\n      throw new Error(\\n        \\"Your plugin have a bug: `parentWidget` is undefined, you should use `<ParentWidgetContext.Provider value={props.parentWidget}>`, see tw-react for document.\\"\\n      );\\n    }\\n    if (options?.skip === true) {\\n      return;\\n    }\\n    const id = String(Math.random());\\n    const newWidgetNode = parentWidget.makeChildWidget(parseTreeNode, { variables: { \\"use-widget-id\\": id } });\\n    newWidgetNode.render(domNode, null);\\n    parentWidget.children.push(newWidgetNode);\\n    return () => {\\n      parentWidget.children = parentWidget.children.filter((child) => child.getVariable(\\"use-widget-id\\") !== id);\\n      if (domNode === null) {\\n        return;\\n      }\\n      domNode.textContent = \\"\\";\\n    };\\n  }, [parseTreeNode, containerReference, parentWidget, options?.skip]);\\n}\\n"},"react/jsx-runtime.js":{"title":"react/jsx-runtime.js","text":"\\"use strict\\";var f=require(\\"react\\"),k=Symbol.for(\\"react.element\\"),l=Symbol.for(\\"react.fragment\\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};function q(e,r,t){var o,f={},_=null,s=null;for(o in void 0!==t&&(_=\\"\\"+t),void 0!==r.key&&(_=\\"\\"+r.key),void 0!==r.ref&&(s=r.ref),r)m.call(r,o)&&!p.hasOwnProperty(o)&&(f[o]=r[o]);if(e&&e.defaultProps)for(o in r=e.defaultProps)void 0===f[o]&&(f[o]=r[o]);return{$$typeof:k,type:e,key:_,ref:s,props:f,_owner:n.current}}exports.Fragment=l,exports.jsx=q,exports.jsxs=q;","creator":"LinOnetwo","type":"application/javascript","module-type":"library"},"react-dom":{"title":"react-dom","text":"!function(){\\"use strict\\";var e,n;e=this,n=function(e,n){function t(e){for(var n=\\"https://reactjs.org/docs/error-decoder.html?invariant=\\"+e,t=1;t<arguments.length;t++)n+=\\"&args[]=\\"+encodeURIComponent(arguments[t]);return\\"Minified React error #\\"+e+\\"; visit \\"+n+\\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\\"}function r(e,n){l(e,n),l(e+\\"Capture\\",n)}function l(e,n){for(Bl[e]=n,e=0;e<n.length;e++)Al.add(n[e])}function a(e,n,t,r,l,a,u){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=l,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=a,this.removeEmptyString=u}function u(e,n,t,r){var l=ql.hasOwnProperty(n)?ql[n]:null;(null!==l?0!==l.type:r||!(2<n.length)||\\"o\\"!==n[0]&&\\"O\\"!==n[0]||\\"n\\"!==n[1]&&\\"N\\"!==n[1])&&(function(e,n,t,r){if(null===n||void 0===n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case\\"function\\":case\\"symbol\\":return!0;case\\"boolean\\":return!r&&(null!==t?!t.acceptsBooleans:\\"data-\\"!==(e=e.toLowerCase().slice(0,5))&&\\"aria-\\"!==e);default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,l,r)&&(t=null),r||null===l?function(e){return!!Hl.call($l,e)||!Hl.call(jl,e)&&(Ql.test(e)?$l[e]=!0:(jl[e]=!0,!1))}(n)&&(null===t?e.removeAttribute(n):e.setAttribute(n,\\"\\"+t)):l.mustUseProperty?e[l.propertyName]=null===t?3!==l.type&&\\"\\":t:(n=l.attributeName,r=l.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(l=l.type)||4===l&&!0===t?\\"\\":\\"\\"+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}function o(e){return null===e||\\"object\\"!=typeof e?null:\\"function\\"==typeof(e=pa&&e[pa]||e[\\"@@iterator\\"])?e:null}function i(e,n,t){if(void 0===ca)try{throw Error()}catch(e){ca=(n=e.stack.trim().match(/\\\\n( *(at )?)/))&&n[1]||\\"\\"}return\\"\\\\n\\"+ca+e}function s(e,n){if(!e||ha)return\\"\\";ha=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,\\"props\\",{set:function(){throw Error()}}),\\"object\\"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(n){if(n&&r&&\\"string\\"==typeof n.stack){for(var l=n.stack.split(\\"\\\\n\\"),a=r.stack.split(\\"\\\\n\\"),u=l.length-1,o=a.length-1;1<=u&&0<=o&&l[u]!==a[o];)o--;for(;1<=u&&0'... 147430 more characters,
      name: 'ReactJS'
    },
    cache: [Object: null prototype] {}
  }
  {
    fields: [Object: null prototype] {
      text: `{"tiddlers":{"$:/plugins/telmiger/EditorCounter/EditTemplate":{"title":"$:/plugins/telmiger/EditorCounter/EditTemplate","created":"20170126185919666","creator":"Thomas Elmiger","list-before":"$:/core/ui/EditTemplate/type","modified":"20200605055914338","modifier":"Thomas Elmiger","tags":"$:/tags/EditTemplate EditorCounter","type":"text/vnd.tiddlywiki","text":"<div class=\\"te-editor-counter\\">\\n<$reveal type=\\"match\\" text=\\"yes\\" state=\\"$:/plugins/telmiger/EditorCounter/settings/characters\\">\\n<$editor-counter tiddler=<<currentTiddler>> colors='black:0,gray:140,green:300,indianred:800,red:1600'/> characters </$reveal>\\n<$reveal type=\\"match\\" text=\\"yes\\" state=\\"$:/plugins/telmiger/EditorCounter/settings/autosave\\">\\n<span class=\\"tc-muted\\"><span class=\\"tc-dirty-indicator\\">•</span> <$editor-counter mode=autosave savelimit={{$:/plugins/telmiger/EditorCounter/settings/autosave!!limit}}/> saved</span>\\n</$reveal>\\n<$reveal type=\\"match\\" text=\\"yes\\" state=\\"$:/plugins/telmiger/EditorCounter/settings/characters\\"> &nbsp;&nbsp; \\n</$reveal>\\n<$reveal type=\\"match\\" text=\\"yes\\" state=\\"$:/plugins/telmiger/EditorCounter/settings/words\\">\\n<$editor-counter mode=word colors='black:0,gray:200,green:300,indianred:1000,red:2000'/> words &nbsp;&nbsp; \\n</$reveal>\\n<$reveal type=\\"match\\" text=\\"yes\\" state=\\"$:/plugins/telmiger/EditorCounter/settings/autosave-pause\\">\\n<$checkbox tiddler=\\"$:/plugins/telmiger/EditorCounter/settings/autosave\\" field=\\"text\\" checked=\\"yes\\" unchecked=\\"no\\" default=\\"no\\"> Autosave</$checkbox>\\n<$reveal type=\\"match\\" text=\\"yes\\" state=\\"$:/plugins/telmiger/EditorCounter/settings/autosave\\">\\n (uncheck to pause)\\n</$reveal>\\n</$reveal>\\n</div>\\n<style>\\n.te-editor-counter { margin-top: -.25rem; margin-bottom: 0.75rem; }\\n</style>\\n<!--\\n* Show the number of characters and/or words entered in edit mode.\\n* Show the number of characters at last autosave (autosave at a character difference as defined in settings).\\n-->"},"$:/plugins/telmiger/EditorCounter/TitleTemplate":{"title":"$:/plugins/telmiger/EditorCounter/TitleTemplate","created":"20170213190419968","creator":"Thomas Elmiger","list-before":"$:/core/ui/EditTemplate/tags","modified":"20200605055914365","modifier":"Thomas Elmiger","tags":"$:/tags/EditTemplate EditorCounter","type":"text/vnd.tiddlywiki","text":"<$reveal type=\\"match\\" text=\\"yes\\" state=\\"$:/plugins/telmiger/EditorCounter/settings/title\\">\\n<div class=\\"te-title-counter\\" title=\\"Title length\\">\\n<$editor-counter tiddler=<<currentTiddler>> field=\\"draft.title\\" colors='green:20,indianred:30,red:40'/> chars\\n</div>\\n<style>\\n.te-title-counter { position:absolute; right:1rem; margin-top:-2.25rem; padding-right:0.125rem; opacity:0.6; }\\n@media (min-width: 30em) {\\n.te-title-counter { right:2rem; }\\n}\\n@media (min-width: 42em) {\\n.te-title-counter { right:4rem; }\\n}\\n</style>\\n</$reveal>\\n\\n<!--\\nShow the number of characters in the title\\n-->"},"$:/plugins/telmiger/EditorCounter/about":{"title":"$:/plugins/telmiger/EditorCounter/about","created":"20200524222834178","modified":"20200605055914378","tags":"","type":"text/vnd.tiddlywiki","text":"The [[EditorCounter plugin|https://tid.li/tw5/plugins.html#EditorCounter]] can display counters for words and characters in the edit view. In single page wikis it can save texts automagically in the background – check the [[plugin settings|$:/plugins/telmiger/EditorCounter/settings]].\\n"},"$:/plugins/telmiger/EditorCounter/counter.js":{"title":"$:/plugins/telmiger/EditorCounter/counter.js","text":"/*\\\\\\ntitle: $:/plugins/telmiger/EditorCounter/counter.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nversion: 0.6.3\\n\\nCount the number of words or characters in a tiddler/field/input string – Autosave while editing\\n\\nUsage: see the plugin’s readme.\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\"use strict\\";\\n\\nvar Widget = require(\\"$:/core/modules/widgets/widget.js\\").widget;\\n\\nvar CounterWidget = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nCounterWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM – reset autosave attributes\\n*/\\nCounterWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\t// autosave attributes\\n\\tthis.diffTotal = 0;\\n\\tthis.saveNow = false;\\n\\t// calculate state \\n\\tthis.execute();\\n\\tif(this.mode == \\"autosave\\") {\\n\\t\\t// store the number of last saved characters\\n\\t\\tthis.lastSavedCount = this.currentCount;\\n\\t\\tthis.diffLastCount = this.currentCount;\\n\\t} \\n\\tvar textNode = this.document.createTextNode(this.currentCount);\\n\\tvar domNode = this.document.createElement(\\"span\\");\\n\\tparent.insertBefore(domNode,nextSibling);\\n\\tthis.renderChildren(domNode,null);\\n\\tthis.domNodes.push(domNode);\\n};\\n\\n/*\\nCalculate the numbers\\n*/\\nCounterWidget.prototype.getLength = function(text) {\\n\\tvar result = 0;\\n\\tswitch(this.mode) {\\n\\t\\tcase \\"character\\":\\n\\t\\t\\tresult = text.length.toString();\\n\\t\\t\\tbreak;\\n\\t\\tcase \\"autosave\\":\\n\\t\\t\\tresult = text.length.toString();\\n\\t\\t\\t// sum up difference since last count\\n\\t\\t\\tthis.diffTotal += this.checkAutosave(result);\\n\\t\\t\\t// check saving limit\\n\\t\\t\\tthis.saveNow = (this.diffTotal >= this.saveLimit) ? true : false;\\n\\t\\t\\tbreak;\\n\\t\\tcase \\"word\\":\\n\\t\\t\\tif(text.match(/\\\\w+/g)) {\\n\\t\\t\\t\\tresult = text.match(/\\\\w+/g).length.toString();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tresult = 0;\\n\\t\\t\\t}\\n\\t\\t\\tbreak;\\n\\t\\tdefault: // \\"?!\\"\\n\\t\\t\\tresult = \\"mode undefined\\";\\n\\t}\\n\\treturn result;\\n}\\n\\n/*\\nSet autosave \\n*/\\nCounterWidget.prototype.checkAutosave = function(textlength) {\\n\\t// calculate difference since last count\\n\\tthis.diffChars = Math.abs(textlength - this.diffLastCount);\\n\\t// store text length\\n\\tthis.diffLastCount = textlength;\\n\\treturn this.diffChars;\\n}\\n\\n/*\\nGet the colors as an array\\n*/\\nCounterWidget.prototype.getColors = function() {\\n\\tvar color_array1 = this.colors.split(',');\\n\\tvar i;\\n\\tcolor_array1.sort(function sortfunction(a, b){\\n\\t\\treturn a.split(':')[1] - b.split(':')[1];\\n\\t});\\n\\tfor(i = 0; i < color_array1.length; i++) {\\n\\t\\tthis.color_array[i] = color_array1[i].split(':')[0];\\n\\t\\tthis.count_array[i] = color_array1[i].split(':')[1];\\n\\t}\\n}\\n\\n/*\\nGet the numbers\\n*/\\nCounterWidget.prototype.getNumber = function() {\\n\\t// Count letters or words as appropriate.\\n\\tvar result = 0;\\n\\tif(this.countText) {\\n\\t\\t// text supplied as parameter \\n\\t\\tresult = this.getLength(this.countText);\\n\\t} else {\\n\\t\\tvar tiddler = this.wiki.getTiddler(this.tiddler);\\n\\t\\tvar fieldContent = tiddler.getFieldString(this.field);\\n\\t\\tif(fieldContent) {\\n\\t\\t\\tresult = this.getLength(fieldContent);\\n\\t\\t} else {\\n\\t\\t\\tresult = 0;\\n\\t\\t}\\n\\t}\\n\\treturn result;\\n}\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nCounterWidget.prototype.execute = function() {\\n\\t// Get parameters from our attributes\\n\\tthis.mode = this.getAttribute(\\"mode\\",\\"character\\");\\n\\tthis.saveLimit = this.getAttribute(\\"savelimit\\",200);\\n\\tthis.tiddler = this.getAttribute(\\"tiddler\\",this.getVariable(\\"currentTiddler\\"));\\n\\tthis.field = this.getAttribute(\\"field\\",\\"text\\");\\n\\tthis.countText = this.getAttribute(\\"text\\");\\n\\tthis.colors = this.getAttribute(\\"colors\\");\\n\\tthis.stateTiddler = this.getAttribute(\\"colorState\\");\\n\\t// Count letters or words as appropriate.\\n\\tthis.currentCount = this.getNumber();\\n\\tthis.diffChars = 0;\\n\\t//Find the color cut-offs, if any.\\n\\tif(this.colors) {\\n\\t\\tthis.color_array = [];\\n\\t\\tthis.count_array = [];\\n\\t\\tvar i;\\n\\t\\tthis.getColors();\\n\\n\\t\\t// set the color if the counter is high enough. The color with the largest value that is less than this.currentCount wins.\\n\\t\\tfor(i = 0; i < this.color_array.length; i++) {\\n\\t\\t\\tif(Number(this.currentCount) >= Number(this.count_array[this.color_array.length - 1 - i])) {\\n\\t\\t\\t\\tif(this.stateTiddler) {\\n\\t\\t\\t\\t\\tthis.wiki.setText(this.stateTiddler,\\"text\\",undefined,this.color_array[this.color_array.length -1 - i]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tthis.currentCount = '@@color:' + this.color_array[this.color_array.length -1 - i] + ';' \\n\\t\\t\\t\\t\\t+ this.currentCount + '@@';\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tif(this.stateTiddler && i === this.color_array.length-1) {\\n\\t\\t\\t\\tthis.wiki.setText(this.stateTiddler,\\"text\\",undefined,'');\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\tvar parser = this.wiki.parseText(\\"text/vnd.tiddlywiki\\",this.currentCount,{parseAsInline: true});\\n\\tvar parseTreeNodes = parser ? parser.tree : [];\\n\\tthis.makeChildWidgets(parseTreeNodes);\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nCounterWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar refreshed = false;\\n\\t// Re-execute the filter to get the count\\n\\tthis.computeAttributes();\\n\\tvar oldCount = this.currentCount;\\n\\tthis.execute();\\n\\tif(this.currentCount !== oldCount && this.mode !== \\"autosave\\") {\\n\\t\\t// Regenerate and rerender the widget and replace the existing DOM node\\n\\t\\tthis.refreshSelf();\\n\\t\\trefreshed = true;\\n\\t}\\n\\tif(this.saveNow) {\\n\\t\\t// Trigger an autosave and refresh\\n\\t\\t$tw.rootWidget.dispatchEvent({type: \\"tm-auto-save-wiki\\"});\\n\\t\\tthis.refreshSelf();\\n\\t\\trefreshed = true;\\n\\t} \\n\\treturn refreshed;\\n};\\n\\nexports[\\"editor-counter\\"] = CounterWidget;\\n\\n})();\\n","type":"application/javascript","module-type":"widget","created":"20170207230719552","creator":"Thomas Elmiger","modified":"20200605055914454","modifier":"Thomas Elmiger","tags":"EditorCounter"},"$:/plugins/telmiger/EditorCounter/credits":{"title":"$:/plugins/telmiger/EditorCounter/credits","created":"20170304102433909","creator":"Thomas Elmiger","modified":"20200605055914466","modifier":"Thomas Elmiger","tags":"EditorCounter","type":"text/vnd.tiddlywiki","text":"!! Credits\\n\\nMany thanks to Jed for his blueprint widget and demo site, originally on`... 8965 more characters,
      type: 'application/json',
      author: 'Thomas & Jed',
      'core-version': '>=5.1.13',
      created: 2021-10-17T09:29:59.768Z,
      dependents: '',
      description: 'EditorCounter & Autosaver',
      list: [ 'readme', 'settings', 'credits', 'support' ],
      modified: 2021-10-17T09:29:59.768Z,
      name: 'EditorCounter',
      'plugin-type': 'plugin',
      source: 'https://tid.li/tw5/plugins.html',
      title: '$:/plugins/telmiger/EditorCounter',
      version: '0.6.6',
      revision: '0',
      bag: 'default'
    },
    cache: [Object: null prototype] {}
  }
  {
    fields: [Object: null prototype] {
      text: '{"tiddlers":{"$:/language/HarveyBalls/chaotic/desc":{"title":"$:/language/HarveyBalls/chaotic/desc","created":"20171004221642521","creator":"Thomas Elmiger","modified":"20190426122338635","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"circle filled with colour"},"$:/language/HarveyBalls/chaotic/title":{"title":"$:/language/HarveyBalls/chaotic/title","created":"20171004221542587","creator":"Thomas Elmiger","modified":"20190426122338622","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"chaotic"},"$:/language/HarveyBalls/complex/desc":{"title":"$:/language/HarveyBalls/complex/desc","created":"20171005182623257","creator":"Thomas Elmiger","modified":"20190426122338805","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"circle filled with colour exempt upper right quadrant"},"$:/language/HarveyBalls/complex/title":{"title":"$:/language/HarveyBalls/complex/title","created":"20171005182745229","creator":"Thomas Elmiger","modified":"20190426122338802","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"complex"},"$:/language/HarveyBalls/complicated/desc":{"title":"$:/language/HarveyBalls/complicated/desc","created":"20171005182907849","creator":"Thomas Elmiger","modified":"20190426122338798","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"circle with left half filled"},"$:/language/HarveyBalls/complicated/title":{"title":"$:/language/HarveyBalls/complicated/title","created":"20171005182951452","creator":"Thomas Elmiger","modified":"20190426122338793","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"complicated"},"$:/language/HarveyBalls/empty/desc":{"title":"$:/language/HarveyBalls/empty/desc","created":"20171001210121157","creator":"Thomas Elmiger","modified":"20190426122338790","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"circle (not filled)"},"$:/language/HarveyBalls/empty/title":{"title":"$:/language/HarveyBalls/empty/title","created":"20171001210047885","creator":"Thomas Elmiger","modified":"20190426122338786","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"empty"},"$:/language/HarveyBalls/full/desc":{"title":"$:/language/HarveyBalls/full/desc","created":"20171001201844602","creator":"Thomas Elmiger","modified":"20190426122338782","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"circle filled with colour"},"$:/language/HarveyBalls/full/title":{"title":"$:/language/HarveyBalls/full/title","created":"20171001204350059","creator":"Thomas Elmiger","modified":"20190426122338778","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"full"},"$:/language/HarveyBalls/half/desc":{"title":"$:/language/HarveyBalls/half/desc","created":"20171001211939192","creator":"Thomas Elmiger","modified":"20190426122338775","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"circle with right half filled"},"$:/language/HarveyBalls/half/title":{"title":"$:/language/HarveyBalls/half/title","created":"20171001213417585","creator":"Thomas Elmiger","modified":"20190426122338771","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"half"},"$:/language/HarveyBalls/obvious/desc":{"title":"$:/language/HarveyBalls/obvious/desc","created":"20171005183829060","creator":"Thomas Elmiger","modified":"20190426122338767","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"circle with upper left quadrant filled"},"$:/language/HarveyBalls/obvious/title":{"title":"$:/language/HarveyBalls/obvious/title","created":"20171005183754671","creator":"Thomas Elmiger","modified":"20190426122338763","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"obvious"},"$:/language/HarveyBalls/quarter/desc":{"title":"$:/language/HarveyBalls/quarter/desc","created":"20171001211324859","creator":"Thomas Elmiger","modified":"20190426122338752","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"circle with upper right quadrant filled"},"$:/language/HarveyBalls/quarter/title":{"title":"$:/language/HarveyBalls/quarter/title","created":"20171001211836428","creator":"Thomas Elmiger","modified":"20190426122338747","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"quarter"},"$:/language/HarveyBalls/quarter-empty/desc":{"title":"$:/language/HarveyBalls/quarter-empty/desc","created":"20171001212131114","creator":"Thomas Elmiger","modified":"20190426122338759","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"circle filled with colour exempt upper left quadrant"},"$:/language/HarveyBalls/quarter-empty/title":{"title":"$:/language/HarveyBalls/quarter-empty/title","created":"20171001212013679","creator":"Thomas Elmiger","modified":"20190426122338755","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"quarter empty"},"$:/language/HarveyBalls/simple/desc":{"title":"$:/language/HarveyBalls/simple/desc","created":"20171004222018780","creator":"Thomas Elmiger","modified":"20190426122338743","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"circle (not filled)"},"$:/language/HarveyBalls/simple/title":{"title":"$:/language/HarveyBalls/simple/title","created":"20171004221927784","creator":"Thomas Elmiger","modified":"20190426122338739","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"simple"},"$:/plugins/telmiger/HarveyBalls/alternatives":{"title":"$:/plugins/telmiger/HarveyBalls/alternatives","created":"20171005185418327","creator":"Thomas Elmiger","modified":"20190426122338735","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"!! Alternatives\\n\\n!!! SVG from Wikipedia\\nOn https://en.wikipedia.org/wiki/Harvey_Balls you will find alternative graphics in one single SVG file. There are neither tiltes nor descriptions in this image.\\n\\n!!! Fonts\\nSome fonts like Arial Unicode MS contain symbols similar to Harvey balls:\\n\\n@@font-size:2em; \\n○●◯◔◑◕◐◒◓◖◗◝◞◟◜◝◡◉◌◍◎☹☺☻\\n@@\\n\\nThese are found starting around U+25CB (white circle). I don’t know if or how a screenreader would announce them. Other dedicated fonts with Harvey balls are available, I found some using the numbers from 0 to 9 and I guess a screenreader would announce them as such. Would numbers from 0 to 9 convey enough meaning to your users? Then you should use numbers instead of Harvey balls if you ask me.\\n\\n!! Accessibility\\n\\nIn general font solutions as well as monolithic SVG graphics lack the ability to control or adapt the meaning of the symbols/characters.\\n\\nThere is no hint popping up from a font if a user hovers over the icon with the pointer of the mouse. \\n\\nWith my SVG solution, the title is shown as a hint and ~VoiceOver on the Mac announces both title and desc attributes.\\n"},"$:/plugins/telmiger/HarveyBalls/chaotic/icon.svg":{"title":"$:/plugins/telmiger/HarveyBalls/chaotic/icon.svg","created":"20171004221325017","creator":"Thomas Elmiger","modified":"20190426122338730","modifier":"Thomas Elmiger","tags":"$:/tags/Image","type":"text/vnd.tiddlywiki","text":"<svg class=\\"em-icon harvey-ball ball-chaotic\\" xmlns=\\"http://www.w3.org/2000/svg\\" fill=\\"currentColor\\" viewBox=\\"0 0 128 128\\" role=\\"img\\" aria-labelledby=\\"title desc\\"><title id=\\"title\\">{{$:/language/HarveyBalls/chaotic/title}}</title><desc id=\\"desc\\">{{$:/language/HarveyBalls/chaotic/desc}}</desc><path d=\\"M64 128c35.346 0 64-28.654 64-64 0-35.346-28.654-64-64-64C28.654 0 0 28.654 0 64c0 35.346 28.654 64 64 64z\\"/></svg>"},"$:/plugins/telmiger/HarveyBalls/complex/icon.svg":{"title":"$:/plugins/telmiger/HarveyBalls/complex/icon.svg","created":"20171005184808610","creator":"Thomas Elmiger","modified":"20190426122338726","modifier":"Thomas Elmiger","tags":"$:/tags/Image","type":"text/vnd.tiddlywiki","text":"<svg class=\\"em-icon harvey-ball ball-complex\\" xmlns=\\"http://www.w3.org/2000/svg\\" fill-rule=\\"evenodd\\" fill=\\"currentColor\\" viewBox=\\"0 0 128 128\\" role=\\"img\\" aria-labelledby=\\"title desc\\"><title id=\\"title\\">{{$:/language/HarveyBalls/complex/title}}</title><desc id=\\"desc\\">{{$:/language/HarveyBalls/complex/desc}}</desc><path d=\\"M64 128C28.654 128 0 99.346 0 64 0 28.654 28.654 0 64 0c35.346 0 64 28.654 64 64 0 35.346-28.654 64-64 64zm48-64c0 .19-48 0-48 0V16c26.51 0 48 21.49 48 48z\\"/></svg>"},"$:/plugins/telmiger/HarveyBalls/complicated/icon.svg":{"title":"$:/plugins/telmiger/HarveyBalls/complicated/icon.svg","created":"20171005184612869","creator":"Thomas Elmiger","modified":"20190426122338722","modifier":"Thomas Elmiger","tags":"$:/tags/Image","type":"text/vnd.tiddlywiki","text":"<svg class=\\"em-icon harvey-ball ball-complicated\\" xmlns=\\"http://www.w3.org/2000/svg\\" fill-rule=\\"evenodd\\" fill=\\"currentColor\\" viewBox=\\"0 0 128 128\\" role=\\"img\\" aria-labelledby=\\"title desc\\"><title id=\\"title\\">{{$:/language/HarveyBalls/complicated/title}}</title><desc id=\\"desc\\">{{$:/language/HarveyBalls/complicated/desc}}</desc><path d=\\"M64 128C28.654 128 0 99.346 0 64 0 28.654 28.654 0 64 0c35.346 0 64 28.654 64 64 0 35.346-28.654 64-64 64zm0-16V16c26.51 0 48 21.49 48 48s-21.49 48-48 48z\\"/></svg>"},"$:/plugins/telmiger/HarveyBalls/credits":{"title":"$:/plugins/telmiger/HarveyBalls/credits","created":"20171005185503725","creator":"Thomas Elmiger","modified":"20190426122338718","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"!!! Credits\\nInspired by ~RunningUtes in a [[Google Group discussion|https://groups.google.com/d/msg/tiddlywiki/utsLmgHZAhM/bxKkdwT2CAAJ]] and these great articles:\\n\\n* https://blog.prototypr.io/align-svg-icons-to-text-and-say-goodbye-to-font-icons-d44b3d7b26b4\\n* https://developer.paciellogroup.com/blog/2013/12/using-aria-enhance-svg-accessibility/"},"$:/plugins/telmiger/HarveyBalls/empty/icon.svg":{"title":"$:/plugins/telmiger/HarveyBalls/empty/icon.svg","created":"20171001102215819","creator":"Thomas '... 10291 more characters,
      type: 'application/json',
      author: 'Thomas Elmiger',
      'core-version': '>=5.1.14',
      created: 2021-10-17T09:30:00.010Z,
      dependents: '',
      description: 'HarveyBalls',
      list: [ 'readme', 'alternatives', 'credits' ],
      modified: 2021-10-17T09:30:00.010Z,
      name: 'HarveyBalls',
      'plugin-type': 'plugin',
      source: 'https://tid.li/tw5/plugins.html',
      title: '$:/plugins/telmiger/HarveyBalls',
      version: '0.0.6',
      revision: '0',
      bag: 'default'
    },
    cache: [Object: null prototype] {}
  }
  {
    fields: [Object: null prototype] {
      text: '{"tiddlers":{"$:/plugins/telmiger/PluginSize/ViewTemplate":{"title":"$:/plugins/telmiger/PluginSize/ViewTemplate","created":"20190122065955189","creator":"Thomas Elmiger","list-after":"$:/core/ui/ViewTemplate/plugin","modified":"20200605060258345","modifier":"Thomas Elmiger","tags":"$:/tags/ViewTemplate","type":"text/vnd.tiddlywiki","text":"<$list filter=\\"[all[current]has[plugin-type]] -[all[current]field:plugin-type[import]]\\">\\n{{||$:/plugins/telmiger/PluginSize/template}}\\n</$list>"},"$:/plugins/telmiger/PluginSize/about":{"title":"$:/plugins/telmiger/PluginSize/about","created":"20200524224655528","modified":"20200605060258364","tags":"","type":"text/vnd.tiddlywiki","text":"This plugin calculates the size of all installed plugins, including themes and languages. It adds a tab //Plugin Info// to the [[$:/ControlPanel]] – the one with the {{$:/core/images/info-button}} icon."},"$:/plugins/telmiger/PluginSize/icon":{"title":"$:/plugins/telmiger/PluginSize/icon","created":"20190127213417005","creator":"Thomas Elmiger","modified":"20200605060258378","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"<<HB21>>"},"$:/plugins/telmiger/PluginSize/plugin-info":{"title":"$:/plugins/telmiger/PluginSize/plugin-info","caption":"{{$:/core/images/info-button}} Plugin Info","created":"20190308213013859","creator":"Thomas Elmiger","list-after":"$:/core/ui/ControlPanel/Plugins","modified":"20200605060258392","modifier":"Thomas Elmiger","tags":"$:/tags/ControlPanel","type":"text/vnd.tiddlywiki","text":"\\\\define lingo-base() $:/language/ControlPanel/Plugins/\\n\\n\\\\define plugin-table(type)\\n<$set name=\\"plugin-type\\" value=\\"\\"\\"$type$\\"\\"\\">\\n<$set name=\\"qualified-state\\" value=<<qualify \\"$:/state/plugin-info\\">>>\\n<$list filter=\\"[!has[draft.of]plugin-type[$type$]sort[description]]\\" emptyMessage=<<lingo \\"Empty/Hint\\">> >\\n<div class=\\"te-info-panel\\">\\n{{||$:/core/ui/Components/plugin-info}}\\n</div>\\n{{||$:/plugins/telmiger/PluginSize/template}}\\n</$list>\\n</$set>\\n</$set>\\n\\\\end\\n\\n<<lingo Installed/Hint>>\\n\\n<<tabs \\"[[$:/core/ui/ControlPanel/Plugins/Installed/Plugins]] [[$:/core/ui/ControlPanel/Plugins/Installed/Themes]] [[$:/core/ui/ControlPanel/Plugins/Installed/Languages]]\\" \\"$:/core/ui/ControlPanel/Plugins/Installed/Plugins\\">>\\n"},"$:/plugins/telmiger/PluginSize/readme":{"title":"$:/plugins/telmiger/PluginSize/readme","created":"20190127210600496","creator":"Thomas Elmiger","modified":"20200605060258408","modifier":"Thomas Elmiger","tags":"","type":"text/vnd.tiddlywiki","text":"!! Plugin Size\\n\\n{{$:/plugins/telmiger/PluginSize/about}}\\n\\n!!! Categories (character count)\\n\\n* <<HB34>> more than 500 k\\n* <<HB21>> up to 500 k \\n* <<HB13>> up to 100 k\\n* <<HB8>> up to 50 k\\n* <<HB5>> up to 25 k\\n\\n!!! Dependencies\\n\\nThis is done using the following other plugins: \\n\\n* [[Editor Counter|https://tid.li/tw5/plugins.html#%24%3A%2Fplugins%2Ftelmiger%2FEditorCounter]] to count the characters in the text field of plugin tiddlers\\n* [[RPN|https://tid.li/tw5/plugins.html#%24%3A%2Fplugins%2Ftelmiger%2Frpn]] for number formatting\\n* [[Harvey Balls|https://tid.li/tw5/plugins.html#%24%3A%2Fplugins%2Ftelmiger%2FHarveyBalls]] for size indication icons\\n\\n!!! Information\\n\\nThe size of installed plugins can be found on \\n\\n* a tab //{{$:/core/images/info-button}} Plugin Info// in the $:/ControlPanel \\n* on $:/plugins/telmiger/PluginSize/plugin-info\\n\\n!!! Copyright \\n\\n© 2019-2020, Thomas Elmiger"},"$:/plugins/telmiger/PluginSize/styles.css":{"title":"$:/plugins/telmiger/PluginSize/styles.css","created":"20190122231405826","creator":"Thomas Elmiger","modified":"20200605060258415","modifier":"Thomas Elmiger","tags":"$:/tags/Stylesheet","type":"text/vnd.tiddlywiki","text":".tiddler-size-indicator {\\n   width: 100%;\\n   background-color: rgba(125,125,125,0.3);\\n   padding: 0.25rem;\\n   margin-bottom: 1rem;\\n}\\n\\n.te-info-panel .tc-plugin-info {\\n   margin-bottom: 0;\\n}\\n\\n.te-info-panel .tc-plugin-info-dropdown {\\n   margin-top: -1px;\\n}"},"$:/plugins/telmiger/PluginSize/support":{"title":"$:/plugins/telmiger/PluginSize/support","created":"20200524225402217","modified":"20200605060258442","tags":"","type":"text/vnd.tiddlywiki","text":"{{$:/plugins/telmiger/support}}"},"$:/plugins/telmiger/PluginSize/template":{"title":"$:/plugins/telmiger/PluginSize/template","created":"20190122222437252","creator":"Thomas Elmiger","list-after":"$:/core/ui/ViewTemplate/plugin","modified":"20200605060258457","modifier":"Thomas Elmiger","type":"text/vnd.tiddlywiki","text":"\\\\define harveyBall(size)\\n<$reveal type=\\"lt\\" text=\\"500001\\" default=$size$>\\n<$reveal type=\\"gt\\" text=\\"100000\\" default=$size$>\\n<<HB21>>\\n</$reveal>\\n<$reveal type=\\"lt\\" text=\\"100001\\" default=$size$>\\n<$reveal type=\\"gt\\" text=\\"50000\\" default=$size$>\\n<<HB13>>\\n</$reveal>\\n<$reveal type=\\"lt\\" text=\\"50001\\" default=$size$>\\n<$reveal type=\\"gt\\" text=\\"25000\\" default=$size$>\\n<<HB8>>\\n</$reveal>\\n<$reveal type=\\"lt\\" text=\\"25001\\" default=$size$>\\n<<HB5>>\\n</$reveal>\\n</$reveal>\\n</$reveal>\\n</$reveal>\\n<$reveal type=\\"gt\\" text=\\"500000\\" default=$size$>\\n<<HB34>>\\n</$reveal>\\n\\\\end\\n<div class=\\"tiddler-size-indicator\\">\\n<$wikify name=\\"size\\" text=\\"\\"\\"<$editor-counter tiddler=<<currentTiddler>> field=\\"text\\" mode=\\"character\\"/>\\"\\"\\">\\n<$macrocall $name=\\"harveyBall\\" size=<<size>>/> – plugin size: <$macrocall $name=\\"rpn\\" a=<<size>> b=\\"1000\\" operation=\\"/\\" decimals=\\"1\\" locale=\\"en-GB\\"/> k characters (<<size>>)\\n</$wikify>\\n</div>"}}}',
      type: 'application/json',
      author: 'Thomas Elmiger',
      'core-version': '>=5.1.17',
      created: 2021-10-17T09:30:00.411Z,
      dependents: '$:/plugins/telmiger/EditorCounter $:/plugins/telmiger/HarveyBalls $:/plugins/telmiger/rpn',
      description: 'Plugin Size – calculate the extra weight',
      list: [ 'readme' ],
      modified: 2021-10-17T09:30:00.411Z,
      name: 'PluginSize',
      'plugin-type': 'plugin',
      source: 'https://tid.li/tw5/plugins.html',
      title: '$:/plugins/telmiger/PluginSize',
      version: '0.1.1',
      revision: '0',
      bag: 'default'
    },
    cache: [Object: null prototype] {}
  }
  {
    fields: [Object: null prototype] {
      description: 'Apply appearance tweaks to Tiddloid client',
      list: [ 'readme', 'config' ],
      name: 'Tiddloid Tweaks',
      'plugin-type': 'plugin',
      tags: [],
      title: '$:/plugins/tiddlywiki/tiddloid-tweaks',
      type: 'application/json',
      version: '1.2.0',
      text: '{\n' +
        '    "tiddlers": {\n' +
        '        "$:/plugins/tiddlywiki/tiddloid-tweaks/config": {\n' +
        '            "text": "These settings apply to the Tiddloid client.\\n\\n!!Appearance\\nApply theme color to system bars: <$select tiddler=\\"$:/config/Tiddloid/ApplyTheme\\" default=\\"Enabled\\">\\n  <option value=\\"yes\\">Enabled</option>\\n  <option value=\\"l_d\\">Light / Dark only</option>\\n  <option value=\\"no\\">Disabled</option>\\n</$select>\\n\\nHide toolbar on loading complete: <$select tiddler=\\"$:/config/Tiddloid/HideToolbar\\" default=\\"Disabled\\">\\n  <option value=\\"yes\\">Enabled</option>\\n  <option value=\\"land\\">Landscape only</option>\\n  <option value=\\"no\\">Disabled</option>\\n</$select>\\n\\n!!Data\\nIf you want to backup your wiki list, click this link and check `INTERNAL/Android/data/top.donmor.tiddloid/files/` on your device.<br /><a href=\\"javascript:var twi = window.twi; if (typeof(window.twi) != \'undefined\') { window.twi.exportDB();alert(\'Please check the output directory for the exported file.\'); }\\">Export data</a>\\n\\n!!Custom actions\\nClick the button below to open or create a config tiddler. The type of this tiddler should be `application/json` and it should be formatted like this:\\n\\n```\\n[\\n  {\\n    \\"name\\": \\"<the name of the action, shown on the toolbar>\\",\\n    \\"icon\\": \\"<a base64 string with no paddings, may be ignored>\\",\\n    \\"action\\": \\"<javascript to execute>\\"\\n  },\\n  {\\n    \\"name\\": \\"act2\\",\\n    \\"action\\": \\"alert(\'message2\')\\"\\n  }\\n]\\n```\\n<$button to=\\"$:/config/Tiddloid/CustomActions.json\\">Configure custom actions</$button>",\n' +
        '            "title": "$:/plugins/tiddlywiki/tiddloid-tweaks/config",\n' +
        '            "caption": "Tiddloid Tweaks",\n' +
        '            "tags": "$:/tags/ControlPanel/Appearance"\n' +
        '        },\n' +
        '        "$:/plugins/tiddlywiki/tiddloid-tweaks/preview1.png": {\n' +
        '            "text": "'... 63172 more characters,
      author: 'donmor'
    },
    cache: [Object: null prototype] {}
  }
  {
    fields: [Object: null prototype] {
      text: `{"tiddlers":{"$:/plugins/tobibeer/appear/widget.js":{"title":"$:/plugins/tobibeer/appear/widget.js","text":"/*\\\\\\ntitle: $:/plugins/tobibeer/appear/widget.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nUse the appear widget for popups, sliders, accordion menus\\n\\n@preserve\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\"use strict\\";\\n\\nvar Widget = require(\\"$:/core/modules/widgets/widget.js\\").widget,\\n\\tAppearWidget = function(parseTreeNode,options) {\\n\\t\\tthis.initialise(parseTreeNode,options);\\n\\t},\\n\\thandlerCache = {};\\n\\n/*\\nInherit from the base widget class\\n*/\\nAppearWidget.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nAppearWidget.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.nextSibling = nextSibling;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tvar cls,button,buttonClose,hidden,reveal,shown,\\n\\t\\t// Will hold the child widgets\\n\\t\\tnodes = [];\\n\\t// Handler instance?\\n\\tif(this.handle) {\\n\\t\\t// Recreate cache\\n\\t\\tthis.getHandlerCache(this.handle,1);\\n\\t\\t// Handle refreshes\\n\\t\\tthis.refreshHandler();\\n\\t// Regular instance\\n\\t} else {\\n\\t\\t// Create button\\n\\t\\tbutton = {type:\\"button\\"};\\n\\t\\t// Init button attributes\\n\\t\\tbutton.attributes = this.setAttributes(button,\\"button\\");\\n\\t\\t// Store current classes\\n\\t\\tcls = button.attributes[\\"class\\"].value.trim();\\n\\t\\t// Add unselected class\\n\\t\\tbutton.attributes[\\"class\\"].value = cls + \\" appear-show\\" + (this.handler ? \\" tc-popup-absolute\\" : \\"\\");\\n\\t\\t// Parse label and add to children\\n\\t\\tbutton.children = this.wiki.parseText(\\n\\t\\t\\t\\"text/vnd.tiddlywiki\\",\\n\\t\\t\\tthis.show,\\n\\t\\t\\t{parseAsInline: true}\\n\\t\\t).tree;\\n\\t\\t// Create reveal\\n\\t\\treveal = {type:\\"reveal\\",children:this.parseTreeNode.children};\\n\\t\\t// Init reveal attributes\\n\\t\\treveal.attributes = this.setAttributes(reveal,\\"reveal\\");\\n\\t\\t// Set custom mode, if configured\\n\\t\\treveal.isBlock = !(this.mode && this.mode === \\"inline\\");\\n\\t\\t// Type popup?\\n\\t\\tif(reveal.attributes.type && reveal.attributes.type.value === \\"popup\\") {\\n\\t\\t\\t// Set button attribute for popup state\\n\\t\\t\\tbutton.attributes.popup = reveal.attributes.state;\\n\\t\\t\\t// Add childnodes\\n\\t\\t\\tnodes.push(button);\\n\\t\\t\\t// Unless we have a deferred handler defined\\n\\t\\t\\tif(!this.handler) {\\n\\t\\t\\t\\t// Push reveal to node tree\\n\\t\\t\\t\\tnodes.push(reveal);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbutton.attributes.handler = this.handler;\\n\\t\\t\\t}\\n\\t\\t// Not a popup\\n\\t\\t} else {\\n\\t\\t\\t// Set reveal attribute for \\"slider mode\\"\\n\\t\\t\\treveal.attributes.type = {type: \\"string\\", value: \\"match\\"};\\n\\t\\t\\t// Must match current tiddler title\\n\\t\\t\\treveal.attributes.text = {type: \\"string\\", value: this.currentTiddler};\\n\\t\\t\\t// Button writes to state tiddler\\n\\t\\t\\tbutton.attributes.set =  reveal.attributes.state;\\n\\t\\t\\t// Sets to current tiddler\\n\\t\\t\\tbutton.attributes.setTo =  {type: \\"string\\", value: this.currentTiddler};\\n\\t\\t\\t// A wrapper reveal that will be hidden once the content is shown containing the button\\n\\t\\t\\thidden = {type:\\"reveal\\",isBlock: this.block, children:[button], attributes: {\\n\\t\\t\\t\\ttype: {type: \\"string\\", value: \\"nomatch\\"},\\n\\t\\t\\t\\tstate: reveal.attributes.state,\\n\\t\\t\\t\\ttext: {type: \\"string\\", value: this.currentTiddler}\\n\\t\\t\\t}};\\n\\t\\t\\t// Endless toggling?\\n\\t\\t\\tif(!this.once) {\\n\\t\\t\\t\\t// Create hide-button as a copy of the button\\n\\t\\t\\t\\tbuttonClose = $tw.utils.deepCopy(button);\\n\\t\\t\\t\\t// Add selected class\\n\\t\\t\\t\\tbuttonClose.attributes[\\"class\\"].value = cls + \\" appear-hide \\" +\\n\\t\\t\\t\\t\\t(this.attr.button.selectedClass ? this.attr.button.selectedClass : \\"\\");\\n\\t\\t\\t\\t// However, resetting the state\\n\\t\\t\\t\\tbuttonClose.attributes.setTo = {type: \\"string\\", value: \\"\\"};\\n\\t\\t\\t\\t// Setting the hide-button label\\n\\t\\t\\t\\tbuttonClose.children = this.wiki.parseText(\\n\\t\\t\\t\\t\\t\\"text/vnd.tiddlywiki\\",\\n\\t\\t\\t\\t\\tthis.hide,\\n\\t\\t\\t\\t\\t{parseAsInline: true}\\n\\t\\t\\t\\t).tree;\\n\\t\\t\\t}\\n\\t\\t\\t// Create a copy of the first reveal containing the button\\n\\t\\t\\tshown = $tw.utils.deepCopy(hidden);\\n\\t\\t\\t// Reset its children\\n\\t\\t\\tshown.children = [];\\n\\t\\t\\t// Endless toggling?\\n\\t\\t\\tif(!this.once) {\\n\\t\\t\\t\\t// Add close button\\n\\t\\t\\t\\tshown.children.push(buttonClose);\\n\\t\\t\\t}\\n\\t\\t\\t// No remote handler?\\n\\t\\t\\tif(!this.handler) {\\n\\t\\t\\t\\t// Add slider contents\\n\\t\\t\\t\\tshown.children.push(reveal);\\n\\t\\t\\t}\\n\\t\\t\\t// Switch reveal type for content reveal wrapper\\n\\t\\t\\tshown.attributes.type.value = \\"match\\";\\n\\t\\t\\t// Add wrapping reveals to output\\n\\t\\t\\tnodes.push(hidden,shown);\\n\\t\\t}\\n\\t\\t// Construct the child widgets\\n\\t\\tthis.makeChildWidgets(nodes);\\n\\t\\t// Render into the dom\\n\\t\\tthis.renderChildren(this.parentDomNode,nextSibling);\\n\\t\\t// Now, do we have a remote handler?\\n\\t\\tif(this.handler) {\\n\\t\\t\\t// Update its state\\n\\t\\t\\tthis.addToHandlerCache(reveal);\\n\\t\\t}\\n\\t}\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nAppearWidget.prototype.execute = function() {\\n\\tvar self = this;\\n\\t// Attribute mapping\\n\\tthis.attr = {\\n\\t\\t// Which attributes map to which element\\n\\t\\tmap: {\\n\\t\\t\\treveal: {\\n\\t\\t\\t\\t\\"class\\":1,\\n\\t\\t\\t\\tposition:1,\\n\\t\\t\\t\\tretain:1,\\n\\t\\t\\t\\tstate:1,\\n\\t\\t\\t\\tstyle:1,\\n\\t\\t\\t\\ttag:1,\\n\\t\\t\\t\\ttype:1\\n\\t\\t\\t},\\n\\t\\t\\tbutton: {\\n\\t\\t\\t\\t\\"button-class\\":1,\\n\\t\\t\\t\\t\\"button-style\\":1,\\n\\t\\t\\t\\t\\"button-tag\\":1,\\n\\t\\t\\t\\ttooltip:1,\\n\\t\\t\\t\\tselectedClass:1\\n\\t\\t\\t}\\n\\t\\t},\\n\\t\\t// Rename duplicate attributes later\\n\\t\\trename: {\\n\\t\\t\\t\\"button-class\\":\\"class\\",\\n\\t\\t\\t\\"button-style\\":\\"style\\",\\n\\t\\t\\t\\"button-tag\\":\\"tag\\"\\n\\t\\t},\\n\\t\\t// Initialize empty containers\\n\\t\\tbutton: {},\\n\\t\\treveal: {}\\n\\t};\\n\\t// Loop widget attributes\\n\\t$tw.utils.each(this.attributes,function(val,key) {\\n\\t\\tvar next;\\n\\t\\t// Loop mappings\\n\\t\\t$tw.utils.each(\\n\\t\\t\\tself.attr.map,function(attr,el) {\\n\\t\\t\\t// Loop attributes for element\\n\\t\\t\\t$tw.utils.each(Object.keys(attr),function(attr) {\\n\\t\\t\\t\\t// Attribute for element?\\n\\t\\t\\t\\tif(attr == key) {\\n\\t\\t\\t\\t\\t// Store attr value\\n\\t\\t\\t\\t\\tself.attr[el][key] = val;\\n\\t\\t\\t\\t\\t// Next attribute\\n\\t\\t\\t\\t\\tnext = false;\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t\\treturn next;\\n\\t\\t});\\n\\t});\\n\\t// Handle all other attributes...\\n\\t// Store current tiddler\\n\\tthis.currentTiddler = this.getVariable(\\"currentTiddler\\");\\n\\t// Default button label\\n\\tthis.show = this.getValue(this.attributes.show,\\"show\\");\\n\\t// Label for hide-button\\n\\tthis.hide = this.getValue(this.attributes.hide,\\"hide\\");\\n\\t// None defined?\\n\\tif(!this.hide) {\\n\\t\\t// Use default label\\n\\t\\tthis.hide = this.show;\\n\\t}\\n\\t// Whether to only reveal the content once\\n\\tthis.once = this.attributes.once && this.attributes.once !== \\"false\\";\\n\\t// State shorthand\\n\\tthis.$state = this.attributes.$state;\\n\\t// Reveal mode\\n\\tthis.mode = this.getValue(this.attributes.mode,\\"mode\\");\\n\\t// Is this a handler instance?\\n\\tthis.handle = this.attributes.handle;\\n\\t// Remotely handle this instance?\\n\\tthis.handler = this.attributes.handler;\\n\\t// For that case we take these variables along\\n\\tthis.handlerVariables = (this.attributes.variables || \\"\\") + \\" currentTiddler\\";\\n\\t// Whether or not to keep popups\\n\\tthis.keep = [\\"yes\\",\\"true\\"].indexOf(\\n\\t\\t\\t(this.getValue(this.attributes.keep,\\"keep\\")||\\"\\").toLocaleLowerCase()\\n\\t\\t) >- 1;\\n\\t// No explicit state?\\n\\tif(!this.attr.reveal.state) {\\n\\t\\t// Calculate fallback state\\n\\t\\tthis.attr.reveal.state =\\n\\t\\t\\t\\tthis.getValue(undefined,\\"default-state\\") +\\n\\t\\t\\t\\tthis.currentTiddler +\\n\\t\\t\\t\\tthis.getStateQualifier() + \\"/\\" +\\n\\t\\t\\t\\t(this.attr.reveal.type ? this.attr.reveal.type + \\"/\\" : \\"\\") +\\n\\t\\t\\t\\t(this.mode ? this.mode + \\"/\\" : \\"\\") +\\n\\t\\t\\t\\t(this.once ? \\"once/\\" : \\"\\") +\\n\\t\\t\\t\\t// Append state suffix, if given\\n\\t\\t\\t\\t(this.$state ? \\"/\\" + this.$state : \\"\\");\\n\\t}\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nAppearWidget.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n\\t// Any changed attributes?\\n\\tif(Object.keys(changedAttributes).length) {\\n\\t\\t// Refresh\\n\\t\\tthis.refreshSelf();\\n\\t\\treturn true;\\n\\t}\\n\\t// Global handler?\\n\\tif(this.handle) {\\n\\t\\t// Handle refreshes\\n\\t\\tthis.refreshHandler();\\n\\t}\\n\\t// Check if we're refreshing children\\n\\treturn this.refreshChildren(changedTiddlers);\\n};\\n\\n/*\\nRetrieves a widget parameter as either attribute, config-tiddler default or hard-coded fallback.\\n*/\\nAppearWidget.prototype.getValue = function(value,attr){\\n\\tvar def,undef,\\n\\t\\t// Global fallbacks\\n\\t\\tfallbacks = {\\n\\t\\t\\tshow: \\"»\\",\\n\\t\\t\\t\\"default-state\\": \\"$:/temp/appear/\\"\\n\\t\\t};\\n\\t// If there is no value...\\n\\tif(value === undefined) {\\n\\t\\t// Get default for it\\n\\t\\tdef = this.wiki.getTiddler(\\"$:/plugins/tobibeer/appear/defaults/\\" + attr);\\n\\t\\t// Got one?\\n\\t\\tif(def) {\\n\\t\\t\\t// Check if set to undefined\\n\\t\\t\\tundef = def.getFieldString(\\"undefined\\");\\n\\t\\t\\t// Not undefined?\\n\\t\\t\\tif(!undef || undef === \\"false\\") {\\n\\t\\t\\t\\t// Read default\\n\\t\\t\\t\\tvalue = def.getFieldString(\\"text\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// If we still have no value\\n\\tif(value === undefined) {\\n\\t\\t// Try to read from fallbacks\\n\\t\\tvalue = fallbacks[attr];\\n\\t}\\n\\treturn value;\\n};\\n\\n/*\\nSet child-widget attributes for a given element,\\ndepending on the parsed widget attributes\\n*/\\nAppearWidget.prototype.setAttributes = function(node,element) {\\n\\tvar self = this,\\n\\t\\t// Initialize attributes object\\n\\t\\tresult = {};\\n\\t// Loop attributes defined for this element\\n\\t$tw.utils.each(Object.keys(this.attr.map[element]),function(attr) {\\n\\t\\tvar val,\\n\\t\\t\\t// Check if we needed to rename this attribute\\n\\t\\t\\tname = self.attr.rename[attr];\\n\\t\\t// Not renamed?\\n\\t\\tif(!name) {\\n\\t\\t\\t// Take attribute name as is\\n\\t\\t\\tname = attr;\\n\\t\\t}\\n\\t\\t// Read as widget va`... 11917 more characters,
      type: 'application/json',
      author: 'Tobias Beer',
      'core-version': '>=5.1.9',
      created: 2021-10-17T09:29:20.373Z,
      dependents: '',
      description: 'Create popups, sliders or accordion menus with the appear widget.',
      documentation: 'https://tobibeer.github.io/tw5-appear',
      list: [ 'readme' ],
      modified: 2021-10-17T09:29:20.373Z,
      'plugin-type': 'plugin',
      requires: '',
      source: 'https://github.com/tobibeer/tw5-appear',
      title: '$:/plugins/tobibeer/appear',
      version: '0.6.2',
      revision: '0',
      bag: 'default'
    },
    cache: [Object: null prototype] {}
  }
  {
    fields: [Object: null prototype] {
      created: 2022-08-23T12:38:13.879Z,
      text: '{"tiddlers": {\n' +
        '"$:/plugins/whitefall/adapt-tidgi-config/css/scrollbars": {\n' +
        '    "created": "20211222105510091",\n' +
        '    "text": "\\\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline html\\n\\nhtml {\\n  --scrollbarBG: <<color page-background>>;\\n  --thumbBG: <<color sidebar-tiddler-link-foreground>>; /*other candidate colors: foreground, sidebar-tiddler-link-foreground */\\n}\\n\\n/* only for Twilight palette use <<color sidebar-muted-foreground>> */\\n\\n/* Works on Firefox */\\n* {\\n  scrollbar-width: thin;\\n}\\n/* for Chrome, Edge */\\n::-webkit-scrollbar,\\n  scrollbar-width {\\n  width: 8px;\\n  height:8px;\\n}\\n\\n::-webkit-scrollbar-track {\\n  background: var(--scrollbarBG);\\n}\\n::-webkit-scrollbar-thumb {\\n  border-radius: 6px;\\n  border: 1.5px solid var(--scrollbarBG);\\n  background-color: var(--thumbBG) ;\\n}",\n' +
        '    "title": "$:/plugins/whitefall/adapt-tidgi-config/css/scrollbars",\n' +
        '    "modified": "20221217141853132",\n' +
        '    "tags": "$:/tags/Stylesheet",\n' +
        '    "type": "text/vnd.tiddlywiki",\n' +
        '    "revision": "0",\n' +
        '    "bag": "default"\n' +
        '},\n' +
        '\n' +
        '"$:/plugins/whitefall/adapt-tidgi-config/css/TidGiCSS": {\n' +
        '    "created": "20220801080836036",\n' +
        '    "text": "/* 适配TidGi主题CSS */\\n\\n<$reveal state=\\"$:/themes/tiddlywiki/vanilla/options/stickytitles\\" type=\\"match\\" text=\\"yes\\">\\n``\\n/* 编辑器工具栏 */\\n/* $:/themes/tiddlywiki/vanilla/sticky */\\n/* div.tc-editor-toolbar {top: 70px;} TW编辑器工具栏到TW页面工具栏的距离 */\\n\\n.tc-editor-toolbar {\\n    position: -webkit-sticky;\\n    position: -moz-sticky;\\n    position: -o-sticky;\\n    position: -ms-sticky;\\n    position: sticky;\\n    top: 70px;\\n    background: ``<<colour tiddler-background>>``;\\n    z-index: 500;\\n}\\n\\n.tc-tiddler-preview {\\n    overflow: unset;\\n}\\n\\n``\\n</$reveal>\\n\\n<$reveal type=\\"nomatch\\" state=\\"$:/plugins/tiddlywiki/codemirror/lib/codemirror.css\\">\\n\\n``\\n/* 编辑器高度 */\\n\\n.CodeMirror-lines{\\n     min-height:80px !important;\\n}\\n``\\n\\n</$reveal>\\n",\n' +
        '    "creator": "miao",\n' +
        '    "tags": "$:/tags/Stylesheet",\n' +
        '    "title": "$:/plugins/whitefall/adapt-tidgi-config/css/TidGiCSS",\n' +
        '    "modified": "20221217141931604",\n' +
        '    "modifier": "miao"\n' +
        '},\n' +
        '\n' +
        '"$:/plugins/whitefall/adapt-tidgi-config/Echarts/TheBrain": {\n' +
        '    "created": "20211220184056323",\n' +
        '    "creator": "Sttot",\n' +
        '    "text": "<$echarts $tiddler=\\"$:/plugins/Gk0Wk/echarts/addons/TheBrain.js\\" aliasField=\\"caption\\" levels=\\"3\\" graphTitle=\\"局部视图\\"/>",\n' +
        '    "title": "$:/plugins/whitefall/adapt-tidgi-config/Echarts/TheBrain",\n' +
        '    "caption": "局部视图",\n' +
        '    "modified": "20221130111532694",\n' +
        '    "modifier": "miao",\n' +
        '    "tags": "$:/tags/SideBar",\n' +
        '    "type": "text/vnd.tiddlywiki",\n' +
        '    "revision": "0",\n' +
        '    "bag": "default"\n' +
        '},\n' +
        '\n' +
        '"$:/plugins/whitefall/adapt-tidgi-config/Locator/Sidebar-FolderMenu": {\n' +
        '    "created": "20220822215739962",\n' +
        '    "creator": "LinOnetwo",\n' +
        '    "text": "<$scrollable fallthrough=\\"none\\" class=\\"tc-popup-keep tc-menubar-dropdown-sidebar\\">\\n\\n<$macrocall $name=\\"locator-view\\" baseTitle={{$:/plugins/whitefall/adapt-tidgi-config/Locator/Sidebar-FolderMenuBaseTitle}} />\\n\\n[[使用帮助|$:/plugins/whitefall/adapt-tidgi-config/Locator/TW-Locator基于标签生成的文件夹目录结构使用方法]]\\n</$scrollable>\\n",\n' +
        '    "title": "$:/plugins/whitefall/adapt-tidgi-config/Locator/Sidebar-FolderMenu",\n' +
        '    "caption": "文件目录",\n' +
        '    "description": "文件夹系统目录结构",\n' +
        '    "is-dropdown": "yes",\n' +
        '    "tags": "$:/tags/SideBar $:/tags/MenuBar",\n' +
        '    "type": "text/vnd.tiddlywiki",\n' +
        '    "modified": "20221130111532782",\n' +
        '    "modifier": "miao"\n' +
        '},\n' +
        '\n' +
        '"$:/plugins/whitefall/adapt-tidgi-config/Locator/Sidebar-FolderMenuBaseTitle": {\n' +
        '    "created": "20220822215910996",\n' +
        '    "creator": "TidGiUser",\n' +
        '    "text": "Index",\n' +
        '    "tags": "",\n' +
        '    "title": "$:/plugins/whitefall/adapt-tidgi-config/Locator/Sidebar-FolderMenuBaseTitle",\n' +
        '    "modified": "20221130111532715",\n' +
        '    "modifier": "miao"\n' +
        '},\n' +
        '\n' +
        '"$:/plugins/whitefall/adapt-tidgi-config/Locator/Sidebar-Locator Fields": {\n' +
        '    "created": "20220822223718656",\n' +
        '    "creator": "LinOnetwo",\n' +
        '    "text": "<$vars searchTiddler=\\" \\">\\n  <<locator-fields>>\\n</$vars>",\n' +
        '    "title": "$:/plugins/whitefall/adapt-tidgi-config/Locator/Sidebar-Locator Fields",\n' +
        '    "caption": "Fields",\n' +
        '    "tags": "$:/tags/SideBar",\n' +
        '    "type": "text/vnd.tiddlywiki",\n' +
        '    "modified": "20221130111532726",\n' +
        '    "modifier": "miao"\n' +
        '},\n' +
        '\n' +
        '"$:/plugins/whitefall/adapt-tidgi-config/Locator/Sidebar-SearchResultByFacets": {\n' +
        '    "created": "20200408140310432",\n' +
        '    "creator": "LinOnetwo",\n' +
        '    "text": "<<locator-search>>",\n' +
        '    "title": "$:/plugins/whitefall/adapt-tidgi-config/Locator/Sidebar-SearchResultByFacets",\n' +
        '    "caption": "Facets",\n' +
        '    "tags": "$:/tags/SearchResults",\n' +
        '    "type": "text/vnd.tiddlywiki",\n' +
        '    "modified": "20221130111532739",\n' +
        '    "modifier": "miao"\n' +
        '},\n' +
        '\n' +
        '"$:/plugins/whitefall/adapt-tidgi-config/Locator/Sidebar-SearchResultByFields": {\n' +
        '    "created": "20200408140310432",\n' +
        '    "creator": "LinOnetwo",\n' +
        '    "text": "<<locator-fields>>",\n' +
        '    "title": "$:/plugins/whitefall/adapt-tidgi-config/Locator/Sidebar-SearchResultByFields",\n' +
        '    "caption": "Fields",\n' +
        '    "tags": "$:/tags/SearchResults",\n' +
        '    "type": "text/vnd.tiddlywiki",\n' +
        '    "modified": "20221130111532754",\n' +
        '    "modifier": "miao"\n' +
        '},\n' +
        '\n' +
        '"$:/plugins/whitefall/adapt-tidgi-config/Locator/Snippets-LocatorAboutCurrentTiddler": {\n' +
        '    "created": "20200408133348115",\n' +
        '    "creator": "LinOnetwo",\n' +
        '    "text": "<$macrocall $name=\\"locator-view\\" baseTitle=<<currentTiddler>> />",\n' +
        '    "title": "$:/plugins/whitefall/adapt-tidgi-config/Locator/Snippets-LocatorAboutCurrentTiddler",\n' +
        '    "caption": "添加一个使用当前标题的 tw-Locator",\n' +
        '    "tags": "$:/tags/TextEditor/Snippet",\n' +
        '    "type": "text/vnd.tiddlywiki",\n' +
        '    "modified": "20221130111532762",\n' +
        '    "modifier": "miao"\n' +
        '},\n' +
        '\n' +
        '"$:/plugins/whitefall/adapt-tidgi-config/Locator/TW-Locator\\u57FA\\u4E8E\\u6807\\u7B7E\\u751F\\u6210\\u7684\\u6587\\u4EF6\\u5939\\u76EE\\u5F55\\u7ED3\\u6784\\u4F7F\\u7528\\u65B9\\u6CD5": {\n' +
        '    "created": "20220822220039032",\n' +
        '    "creator": "TidGiUser",\n' +
        '    "text": "# \'\'初次使用：\'\'在`侧边栏` -> `文件目录选项卡`  -> 点击`Index链接`，创建条目名称为`Index`的根文件夹，若想修改根文件夹，请编辑[[根文件夹名称|$:/plugins/whitefall/adapt-tidgi-config/Locator/Sidebar-FolderMenuBaseTitle]]条目，将条目内容改为你需要的条目名（根文件夹名），并且根据该名称新建一个条目（根文件夹）。\\n \\n# 使用前请确定安装了`bimlas/locator`插件\\n\\n# 侧边栏的「目录结构」标签页里展示了\'\'通过标签系统自动生成\'\'的文件夹。\\n\\n* 打了 A 标签，即相当于将文件存储在文件夹 A 中，并以 A 的内容作为文件夹的 Readme\\n* 在任意Tiddler中使用「创建一个标签为此条目名称的新条目」按钮，可以创建以当前Tiddler为文件夹的文件\\n* 点击 `>` 按钮（使它变成 `v`）可以展开文件夹\\n* 直接点击文件夹的名字可以查看这个文件夹的 Readme\\n* 分割线上方是当前目录，再往上是上级目录，点击分割线上方的上级目录名左侧的 `>` 按钮可以回到上级目录\\n* 当处在 A 文件夹内时，点击分割线下方的 `+` 可以在当前文件夹里创建新文件（即创建打了 A 标签的新 Tiddler）\\n* 点击 Filter by fields 可以展开分面搜索工具，点击分面搜索工具内的 `+` 可以增加筛选条件，点击 `x` 㐓减少筛选条件。",\n' +
        '    "title": "$:/plugins/whitefall/adapt-tidgi-config/Locator/TW-Locator基于标签生成的文件夹目录结构使用方法",\n' +
        '    "modified": "20221130111532772",\n' +
        '    "modifier": "miao"\n' +
        '},\n' +
        '\n' +
        '"$:/plugins/whitefall/adapt-tidgi-config/opened-tiddlers-bar/AboveStory": {\n' +
        '    "created": "20221130112222520",\n' +
        '    "text": "<<opened-tiddlers-bar>>",\n' +
        '    "title": "$:/plugins/whitefall/adapt-tidgi-config/opened-tiddlers-bar/AboveStory",\n' +
        '    "creator": "[[Jeffrey Wikinson]]",\n' +
        '    "modifier": "LinOnetwo",\n' +
        '    "tags": "$:/tags/AboveStory",\n' +
        '    "type": "text/vnd.tiddlywiki",\n' +
        '    "modified": "20221130112422907"\n' +
        '},\n' +
        '\n' +
        '"$:/plugins/whitefall/adapt-tidgi-config/opened-tiddlers-bar/LICENSE": {\n' +
        '    "created": "20221130112222520",\n' +
        '    "text": "The MIT License (MIT)\\n\\nCopyright (c) 2015 Jeffrey Wikinson aka Buggyj\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\"Software\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ",\n' +
        '    "title": "$:/plugins/whitefall/adapt-tidgi-config/opened-tiddlers-bar/LICENSE",\n' +
        '    "creator": "LinOnetwo",\n' +
        '    "type": "text/vnd.tiddlywiki",\n' +
        '    "modified": "20221130112447872"\n' +
        '},\n' +
        '\n' +
        '"$:/plugins/whitefall/adapt-tidgi-config/opened-tiddlers-bar/Readme": {\n' +
        '    "created": "20221130112222520",\n' +
        '    "text": "!! Features\\n\\nThis plugin provides VSCode style \\"Opened Tiddlers\\" top bar\\n\\nUse the middle mouse button or the X button to close the tab.\\n\\nUse Shift + mouse wheel to swipe sideways to view.\\n\\n!! Credits\\n\\nThis plugin is based on $:/plugins/bj/storytabs , which is in MIT license, thank you, Buggyj!\\n",\n' +
        '    "title": "$:/plugins/whitefall/adapt-tidgi-config/opened-tiddlers-bar/Readme",\n' +
        '    "creator": "LinOnetwo",\n' +
        '    "type": "text/vnd.tiddlywiki",\n' +
        '    "modified": "20221130112501868"\n' +
        '},\n' +
        '\n' +
        '"$:/plugins/whitefall/adapt-tidgi-config/opened-tiddlers-bar/style.css": {\n' +
        '    "created": "20221016044514316",\n' +
        '    "text": "/** 顶部tab栏 */\\nsection.story-backdrop {\\n  position: fixed;\\n  top: 0;\\n  z-index: 1000;\\n  width: 100vw;\\n  overflow-x: auto;\\n  left: 0;\\n  white-space: nowrap;\\n  overflow: -moz-scrollbars-none;\\n  scrollbar-width: none;\\n}\\nsection.story-backdrop::-webkit-scrollbar {\\n  display: none;\\n}\\n/** tiddlers bar */\\nsection.story-backdrop > p, section.story-backdrop > p > div.tc-tab-buttons {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  background-color: white;\\n  backdrop-filter: blur(3px);\\n  background: <<colour button-background>>;\\n  /** make it possible to drag the app using this bar in TiddlyGit */\\n  -webkit-app-region: drag;\\n}\\n\\n\\nsection.story-backdrop button {\\n  border: none;\\n  border-radius: 0;\\n  margin: 0;\\n  padding: 5px 10p'... 10673 more characters,
      creator: 'TidGiUser',
      title: '$:/plugins/whitefall/adapt-tidgi-config',
      type: 'application/json',
      tags: [],
      modified: 2023-01-01T02:07:44.395Z,
      modifier: 'miao',
      name: 'TidGi配置',
      description: '适配TidGi桌面版程序的配置',
      author: 'miao',
      version: '0.0.10',
      list: [ 'Readme', 'contents' ],
      'packaged-by': 'Gatha on 1st 一月 2023, 10:07:55',
      'core-version': '>=5.1.23',
      'plugin-type': 'plugin'
    },
    cache: [Object: null prototype] {}
  }